#+title: My Emacs Configuration
#+author: Nick Salesky
#+PROPERTY: header-args:emacs-lisp :tangle init.el
#+STARTUP: overview

* About
This is my personal Emacs config that I've built with the "help" :) of many other open-source configs, blog posts, articles, etc. When possible, I try to attribute specific sections to the original source for both my benefit and anyone else's. I started using Emacs with the help of [[https://github.com/doomemacs/doomemacs][Doom Emacs]], so many of my keybindings and other settings are inspired by that.

One important thing is that I haven't really done any effort to shorten the Emacs loading time, so this config takes a while to start up (about 8 seconds or so on my machine). I usually just keep Emacs open or use a daemon so this isn't an issue for me, but maybe something for me to look into in the future!

Some specific configs I looked at include:

- [[https://github.com/dakra/dmacs][Dmacs]] (the structure of this config file is heavily inspired by this!)
- [[https://www.youtube.com/watch?v=SCPoF1PTZpI&t=896s][System Crafters]]

* Installation

Installation should be fairly straightforward. The first time Emacs runs this config, it should hopefully install all the necessary packages automatically. If it doesn't prompt you, you'll need to run ~M-x all-the-icons-install-fonts~.

* Emacs Initialization
Add my custom ELisp files to the load-path.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+END_SRC 

Enable native compilation for all Elisp code
#+BEGIN_SRC emacs-lisp
(setq native-comp-deferred-compilation t)
#+END_SRC

Disable certain byte compiler warnings to cut down on the noise for (usually unnecessary) errors.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local)
      native-comp-async-report-warnings-errors nil)
#+END_SRC 

Increase the garbage collection threshold and process data chunking for performance.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 100000000
      read-process-output-max (* 1024 1024))
#+END_SRC 

** early-init.el
Disable the Toolbar and Menubar in the early-init.el file via ~default-frame-alist~. This is slightly faster than loading them first before turning them off.
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(scroll-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)
#+END_SRC

** Set some basic UI settings early  
Disable the startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC 

Use short answers for prompts
#+BEGIN_SRC emacs-lisp
(setq use-short-answers t)
#+END_SRC 

Don't confirm nonexistent files or buffers
#+BEGIN_SRC emacs-lisp
(setq confirm-nonexistent-file-or-buffer nil)
#+END_SRC 

** custom.el
Create a ~custom.el~ file to store customization info instead of init.el, since this is a literal config.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

* Package System Setup
I'm using =straight.el= with =use-package= to install and configure packages

Set up =straight.el=
#+BEGIN_SRC emacs-lisp

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq straight-host-usernames
      '((github . "nsalesky")))

#+END_SRC 

Set up =use-package=
#+BEGIN_SRC emacs-lisp
;; (straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+END_SRC 

Set up environment variables
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+END_SRC 

* Personal Information
Set up the basic user information variables.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Nick Salesky"
      user-mail-address "nicksalesky@gmail.com")
#+END_SRC 

* Keybindings and Basic Feature Configuration
Here's where I configure some basic Emacs features with keybindings.

** Enable all disabled keybindings
#+BEGIN_SRC emacs-lisp
(setq disabled-command-function nil)
#+END_SRC

** +Evil ðŸ˜ˆ+

#+BEGIN_SRC emacs-lisp :tangle no
(use-package evil
  :ensure t
  :init
  (setq evil-want-keybinding nil
        evil-want-integration t
        evil-want-C-u-scroll t
        evil-want-C-d-scroll t)

  :config
  (evil-mode 1))

(use-package evil-collection
  :ensure t
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

** +General+

#+BEGIN_SRC emacs-lisp :tangle no
(use-package general
  :ensure t
  :config
  (general-evil-setup t)
  (general-create-definer ns/leader-def
    :keymaps '(normal visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")
  (general-create-definer ns/local-leader-def
    :keymaps '(normal visual emacs)
    :prefix "SPC m"
    :global-prefix "C-SPC m"))
#+END_SRC

** +Meow: modal editing+

#+BEGIN_SRC emacs-lisp :tangle no
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   ;; '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("S" . embrace-commander)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))

(use-package meow
  :config
  (meow-setup)
  (meow-global-mode 1)
  :hook
  (vterm-mode . (lambda () (meow-mode 0))))
#+END_SRC

** Embrace: surround
#+BEGIN_SRC emacs-lisp
(use-package embrace
  :straight (:type git :host github :repo "cute-jumper/embrace.el")
  ;; :bind (("C-M-s-#" . embrace-commander))
  :config
  (defun embrace-markdown-mode-hook ()
    (dolist (lst '((?* "*" . "*")
                   (?\ "\\" . "\\")
                   (?$ "$" . "$")
                   (?/ "/" . "/")))
      (embrace-add-pair (car lst) (cadr lst) (cddr lst))))
  (add-hook 'markdown-mode-hook 'embrace-markdown-mode-hook)
  (add-hook 'org-mode-hook 'embrace-org-mode-hook))
#+END_SRC

** Electric-pair-mode
Disable ~electric-pair-mode~ for a select subset of modes. 

#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
(setq electric-pair-inhibit-predicate
      (lambda (char)
        (member major-mode '(org-mode))))
#+END_SRC

** Disable ESC ESC ESC

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "ESC ESC"))
#+END_SRC

** Replace selected text
Enable =delete-selection-mode= so that if there is a marked region, typing in text replaces it

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** Indentation: spaces, not tabs!
Set up the indentation behavior. I took this basic configuration from [[https://dougie.io/emacs/indentation/]]

#+begin_src emacs-lisp

;; Set the default tab settings
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq-default c-basic-offset 4)
(setq-default python-indent-offset 4)

;; Make the backspace properly erase the whole tab instead of removing
;; 1 space at a time
(setq backward-delete-char-untabify-method 'hungry)

#+end_src

** Files
Keybindings for working with files.

#+BEGIN_SRC emacs-lisp

;; Keep track of recently-opened files
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key (kbd "C-x C-r") 'consult-recent-file)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(ns/leader-def
  "." '(find-file :which-key "find file")
  "f" '(:ignore t :which-key "files")
  "fs" '(find-file :which-key "find file")
  "fr" '(consult-recent-file :which-key "find recent file"))
#+END_SRC

** Buffers
#+BEGIN_SRC emacs-lisp :tangle no
(ns/leader-def
  "," '(consult-buffer :which-key "select buffer")
  "b" '(:ignore t :which-key "buffers")
  "bb" '(consult-buffer :which-key "select buffer"))
#+END_SRC

** Windows
Keybindings for operating windows.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("M-o" . ace-window))
#+END_SRC

** Text manipulation

#+BEGIN_SRC emacs-lisp :tangle no
(ns/leader-def
  "/" '(comment-line :which-key "Toggle comment"))
#+END_SRC

** Eval
#+BEGIN_SRC emacs-lisp :tangle no
(ns/leader-def
  "e" '(:ignore t :which-key "eval")
  "el" '(eval-last-sexp :which-key "eval last sexpr")
  "ed" '(eval-defun :which-key "eval defun")
  "e:" '(eval-expression :which-key "eval expression"))
#+END_SRC

** Dumb-jump

#+BEGIN_SRC emacs-lisp
(use-package hydra)

(use-package dumb-jump
  :config
  (defhydra dumb-jump-hydra (:color blue :columns 3)
    "Dumb Jump"
    ("j" dumb-jump-go "Go")
    ("o" dumb-jump-go-other-window "Other window")
    ("e" dumb-jump-go-prefer-external "Go external")
    ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
    ("i" dumb-jump-go-prompt "Prompt")
    ("l" dumb-jump-quick-look "Quick look")
    ("b" dumb-jump-back "Back"))
  (keymap-global-set "M-g j" 'dumb-jump-hydra/body))
#+END_SRC

* Configure builtin/core Emacs packages
** Saveplace: Remember your location in a file
#+BEGIN_SRC emacs-lisp

(use-package saveplace
  :unless noninteractive
  :config
  (setq save-place-limit 1000)
  (save-place-mode))

#+END_SRC 

** Savehist: Keep track of minibuffer history
#+BEGIN_SRC emacs-lisp

(use-package savehist
  :unless noninteractive
  :defer 1
  :config
  (setq savehist-additional-variables '(compile-command kill-ring regexp-search-ring))
  (savehist-mode 1))

#+END_SRC 

#+RESULTS:

** Time
#+BEGIN_SRC emacs-lisp

;; (use-package time
;;   :defer t
;;   :config
;;   (setq display-time-24hr-format nil))

;; TODO look into displaying the current time in the modeline


#+END_SRC 

** Global-auto-revert-mode
Auto-revert all buffers by default

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** Backup and auto-save files
Put all backup and auto-save files in subfolders of the Emacs directory instead of littering the filesystem with them, including for Tramp sessions.
I got the basic code for this from [[https://emacs.stackexchange.com/questions/33/put-all-backups-into-one-backup-folder]]

#+BEGIN_SRC emacs-lisp
(let ((backup-dir (concat user-emacs-directory "backups"))
      (auto-saves-dir (concat user-emacs-directory "auto-saves")))
  (dolist (dir (list backup-dir auto-saves-dir))
    (when (not (file-directory-p dir))
      (make-directory dir t)))
  (setq backup-directory-alist `(("." . ,backup-dir))
        auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
        tramp-backup-directory-alist `((".*" . ,backup-dir))
        tramp-auto-save-directory auto-saves-dir))

(setq backup-by-copying t   ; Don't delink hardlinks
      delete-old-versions t ; Clean up the backups
      version-control t     ; Use version numbers on backups
      kept-new-versions 2   ; Keep some new versions of backups
      kept-old-versions 1)  ; Keep some old backups too

(setq backup-directory-alist
      `(("." . ,(concat user-emacs-directory "backups/"))))
#+END_SRC

** +Emacs-async: Run asynchronous processes+
#+BEGIN_SRC emacs-lisp :tangle no
(use-package async)
#+END_SRC

** Winner-mode: undo/redo window configuration changes
| Command     | Keybinding | Description                               |
|-------------+------------+-------------------------------------------|
| ~winner-undo~ | C-c left   | Undo the most recent window config change |
| ~winner-redo~ | C-c right  | Redo the most recent window config change |

#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

* UI
Set up all the fancy user-interface elements to make Emacs look nice.

** Basic Emacs appearance settings
Set the window title to display the current file and major mode.

#+BEGIN_SRC emacs-lisp
;; (setq-default frame-title-format '("%b [%m]"))
(setq-default frame-title-format '("GNU Emacs"))
#+END_SRC 


Enable global visual line mode to wrap lines properly.

#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC 

Enable line numbers globally for most modes, except the ones explicitly disabled.

#+BEGIN_SRC emacs-lisp

;; Enable line numbers
(column-number-mode)
;; (global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode
         '(prog-mode-hook
           markdown-mode-hook
        ))
(add-hook mode (lambda () (display-line-numbers-mode 1))))

#+END_SRC 

** Diminish: keeping the modeline uncluttered
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :init
  (diminish 'buffer-face-mode)
  (diminish 'visual-line-mode)
  (diminish 'abbrev))
#+END_SRC 

** Fonts
Set up the fonts for text rendering, pretty self explanatory :)

Here are my current font settings
#+BEGIN_SRC emacs-lisp
(defvar ns/default-font "JetBrainsMono Nerd Font"
  "My custom default font choice.")

(defvar ns/fixed-pitch-font "JetBrainsMono Nerd Font"
  "My custom fixed pitch font choice.")

(defvar ns/variable-pitch-font "JetBrainsMono Nerd Font"
  "My custom variable pitch font choice.")

(custom-set-faces
 `(default ((t (:family ,ns/default-font
                        :slant
                        normal
                        :weight
                        regular
                        :height
                        110
                        :width
                        normal)))))
 ;; `(default ((t (:family ,ns/default-font :slant normal :weight regular :height 110 :width normal :foundry "JB  "))))
 ;; `(fixed-pitch ((t (:family ,ns/fixed-pitch-font :height 110))))
 ;; `(variable-pitch ((t (:family ,ns/variable-pitch-font)))))
#+END_SRC  

Also install helpful icons useful for a ton of packages to add more visual detail. *NOTE* you'll have to run ~M-x all-the-icons-install-fonts~ in order to, well, install the fonts!

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC 

** Theme
Give Emacs a nice color scheme! Other themes that I like include:
- doom-palenight
- doom-shades-of-purple
- doom-flatwhite
- doom-tomorrow-day
- mindre-theme

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-moonlight t))

(use-package ef-themes
  :config
  (setq ef-themes-headings ; read the manual's entry or the doc string
      '((0 . (variable-pitch light 1.9))
        (1 . (variable-pitch light 1.8))
        (2 . (variable-pitch regular 1.7))
        (3 . (variable-pitch regular 1.6))
        (4 . (variable-pitch regular 1.5))
        (5 . (variable-pitch 1.4)) ; absence of weight means `bold'
        (6 . (variable-pitch 1.3))
        (7 . (variable-pitch 1.2))
        (t . (variable-pitch 1.1))))
  (setq ef-themes-to-toggle '(ef-summer ef-cherie)
        ef-themes-mixed-fonts t
        ef-themes-variable-pitch-ui t))
  
  ;; (ef-themes-select 'ef-summer))

(use-package modus-themes)
  ;; :init
  ;; (setq modus-themes-mode-line '(moody)))
  ;; :config
  ;; (load-theme 'modus-vivendi t))

#+END_SRC

** Modeline
I use ~doom-modeline~ to manage my modeline.

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init
  (setq doom-modeline-height 35
        doom-modeline-support-imenu t)
  (doom-modeline-mode 1))

;; (use-package moody
;;   :custom
;;   (x-underline-at-descent-line t)
;;   :config
;;   (moody-replace-mode-line-buffer-identification)
;;   (moody-replace-vc-mode)
;;   (moody-replace-eldoc-minibuffer-message-function))
#+END_SRC 

** Dashboard
I like having a nice dashboard when Emacs loads in order to remember what I was last working on and (eventually!) view my ~org-agenda~ for the day. Maybe one day I'll revert to just a scratch buffer like others, but I'm sticking with this for now!

#+BEGIN_SRC emacs-lisp

;; Necessary for dashboard in order to get nice seperators between sections
(use-package page-break-lines)

(use-package dashboard
    :custom
    (dashboard-image-banner-max-width 256)
    (dashboard-startup-banner (expand-file-name "emacs.png" user-emacs-directory))
    (dashboard-center-content t)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-projects-backend 'project-el)
    ;; (dashboard-projects-switch-function 'projectile-persp-switch-project)
    (dashboard-items '((recents . 5)
                          (projects . 5)
                          (agenda . 5)))
    (initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    ;; :hook (after-init-hook . dashboard-refresh-buffer)
    :config
    (dashboard-setup-startup-hook))

#+END_SRC

** Smooth Scrolling
Make Emacs scroll more consistently with a small margin at the bottom.

#+BEGIN_SRC emacs-lisp

(pixel-scroll-mode)
(setq scroll-margin 5)

#+END_SRC 

** Helpful
Make the Emacs help pages more "helpful".

#+begin_src emacs-lisp
(use-package helpful
  :bind
  (("C-h f" . helpful-callable)
   ("C-h v" . helpful-variable)
   ("C-h k" . helpful-key)))
#+end_src

** Hl-todo: Highlight and navigate TODO keywords

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :config
  (global-hl-todo-mode))
#+END_SRC

** Transparent Frame
Creates a handy little function to toggle a semi-transparent window frame either for aeshetics or to view another window underneath Emacs.

#+BEGIN_SRC emacs-lisp
(defun ns/toggle-window-transparency ()
  "Toggle transparency."
  (interactive)
  (let ((alpha-transparency 90))
    (if (equal alpha-transparency (frame-parameter nil 'alpha-background))
        (set-frame-parameter nil 'alpha-background 100)
      (set-frame-parameter nil 'alpha-background alpha-transparency))))

;; Make the frame transparent when launched
;; (ns/toggle-window-transparency)
#+END_SRC

** Discover.el

#+BEGIN_SRC emacs-lisp
(use-package discover)
#+END_SRC

* Minibuffer
Sets up minibuffer completion with Vertico.

** Vertico
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (vertico-mode))
#+END_SRC 

** Consult: add helpful functions with completion

#+BEGIN_SRC emacs-lisp
(use-package consult
  :bind
  (;; C-c bindings
   ("C-c h" . consult-history)
   ("C-c m" . consult-mode-command)
   ("C-c k" . consult-kmacro)
   ; M-g bindings
   ("M-g g" . consult-goto-line)
   ("M-g M-g" . consult-goto-line)

   ; Buffers
   ("C-x b" . consult-buffer)
   ("C-x 4 b" . consult-buffer-otther-window)
   ("C-x p b" . consult-project-buffer)

   ; Random
   ("C-x r b" . consult-bookmark)
   ("M-y" . consult-yank-pop)

   ; Special search bindings
   ("C-c q" . consult-line)
   ("C-c w" . consult-ripgrep)
   
   ; M-s bindings (search-map)
   ("M-s d" . consult-find)
   ("M-s r" . consult-ripgrep)
   ("M-s l" . consult-line)
   ("M-s L" . consult-line-multi)
   ("M-s k" . consult-keep-lines)
   ("M-s u" . consult-focus-lines)

   ; Isearch integration
   ("M-s e" . consult-isearch-history)
   :map isearch-mode-map
   ("M-e" . consult-isearch-history)
   ("M-s e" . consult-isearch-history)
   ("M-s l" . consult-line)
   ("M-s L" . consult-line-multi)

   ; Minibuffer history
   :map minibuffer-local-map
   ("M-s" . consult-history)
   ("M-r" . consult-history))

  ;; :general
  ;; (ns/leader-def
  ;;   "s" '(:ignore t :which-key "search")
  ;;   "sr" '(consult-ripgrep :which-key "ripgrep")
  ;;   "sl" '(consult-line :which-key "line search"))

  :init
  (setq consult-narrow-key (kbd "<"))

  ;; Projectile
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))

  ;; Project.el
  (setq consult-project-function #'consult--default-project-function))
#+END_SRC 

** Orderless: match the different parts of completion candidates

#+BEGIN_SRC emacs-lisp

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '(
                                   (file (styles basic partial-completion))
                                   (eglot (styles orderless)))))

#+END_SRC 

** Marginalia: decorate minibuffer completion candidates

#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :bind
  (:map minibuffer-local-map
        ("M-A" . marginalia-cycle))
  :custom
  (marginalia-align 'right)
  :init
  (marginalia-mode)
  :config
  (setq marginalia-command-categories
        (append '((projectile-find-file . project-file)
                  (projectile-find-dir . project-file)
                  (projectile-switch-project . file))
                marginalia-command-categories)))
#+END_SRC

** All-the-icons-completion: add icons to completion candidates

#+BEGIN_SRC emacs-lisp

(use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))

#+END_SRC 

** Embark

#+BEGIN_SRC emacs-lisp

(use-package embark
  ;; TODO: set up bindings for embark-act and embark-dwim
  :bind
  (("C-." . embark-act)
   ("M-." . embark-dwim))

  :config

  ;; Hide the mode line for Embark buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

#+END_SRC 

* Editor
** Ace-isearch: unify disparate searches

#+BEGIN_SRC emacs-lisp
(use-package ace-isearch
  :custom
  (ace-isearch-function #'avy-goto-word-1)
  (ace-isearch-2-function #'avy-goto-char-2)
  (ace-isearch-function-from-isearch #'ace-isearch-consult-line-from-isearch)
  (ace-isearch-jump-based-on-one-char nil)
  :config
  (global-ace-isearch-mode))
#+END_SRC

** Aggressive-indent: Always keep code properly indented
#+BEGIN_SRC emacs-lisp

(use-package aggressive-indent
  :hook
  (emacs-lisp-mode-hook . aggressive-indent-mode))

#+END_SRC 

** Rainbow-delimiters: Different color for each parenthesis level

Give parenthases rainbow coloring depending on their nested level in all programming modes.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC 

** YASnippet: Create common snippets
Add various templates to Emacs.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :config
  (yas-global-mode))
#+END_SRC

** Which-key: List commands for current prefix
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** Olivetti: Centered document editing

#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :custom
  (olivetti-body-width 110)
  (olivetti-style t))
  ;; :hook
  ;; (org-mode . olivetti-mode))
#+END_SRC

** Iedit: Simple multi-cursor editing

#+BEGIN_SRC emacs-lisp
(use-package iedit
  :bind
  ("C-;" . iedit-mode))
#+END_SRC

** TRAMP: Edit remote files

#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh") ;; Use SSH by default for remote files
#+END_SRC

** expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind
  ("C-=" . er/expand-region))
#+END_SRC

** mwim
#+BEGIN_SRC emacs-lisp
(use-package mwim
  :bind
  ("C-a" . mwim-beginning)
  ("C-e" . mwim-end))
#+END_SRC

* Email
** +Basic configuration+
Taken from [[https://firminmartin.com/en/posts/2020/10/read_email_in_emacs_with_notmuch/]]

#+BEGIN_SRC emacs-lisp :tangle no
(setq mail-user-agent 'message-user-agent
      user-mail-address "nicksalesky@gmail.com"
      user-full-name "Nicholas Salesky"
      )
#+END_SRC

** +smtpmail-multi+
#+BEGIN_SRC emacs-lisp :tangle no
(use-package smtpmail-multi
  :config
  (setq smtpmail-multi-accounts
        '((gmail-main . ("nicksalesky@gmail.com" "smtp.gmail.com" 587 "nicksalesky@gmail.com" nil nil nil nil))))

  (setq smtpmail-multi-associations
        '(("nicksalesky@gmail.com" gmail-main)))

  (setq smtpmail-multi-default-account 'gmail-main)
  (setq message-send-mail-function 'smtpmail-multi-send-it)

  (setq smtpmail-debug-info t)
  (setq smtpmail-debug-verbose t)

  (when (>= emacs-major-version 25)
    (setq smtpmail-local-domain (car (split-string (shell-command-to-string "hostname -f"))))))
#+END_SRC 

** +notmuch-el+
#+BEGIN_SRC emacs-lisp :tangle no
(use-package notmuch
  :bind
  ("C-c b" . notmuch)
  :hook
  (notmuch-show . variable-pitch-mode)
  :custom
  (notmuch-search-oldest-first nil)
  (notmuch-kill-buffer-on-exit t))
#+END_SRC

** +auth-source-pass+
Make Emacs read credentials through ~pass~

#+BEGIN_SRC emacs-lisp :tangle no
(use-package auth-source-pass
  :diminish t
  :config
  (auth-source-pass-enable))
#+END_SRC 

* Spell checker
** +Flyspell+
#+BEGIN_SRC emacs-lisp :tangle no
(use-package flyspell
  :hook ((prog-mode . flyspell-prog-mode)
        ((org-mode markdown-mode) . flyspell-mode)))
#+END_SRC 

** +Flyspell-correct: Show list of correct spelling suggestions+

#+BEGIN_SRC emacs-lisp :tangle no
(use-package flyspell-correct
  :after (flyspell)
  :bind
  (:map flyspell-mode-map
        ("C-;" . flyspell-correct-wrapper)))
#+END_SRC 

* Project Management
Tools to distinguish projects and quickly navigate inside projects and between them.

** Dired

#+BEGIN_SRC emacs-lisp
(use-package dired
  :straight nil
  :custom
  (dired-kill-when-opening-new-dired-buffer t))
#+END_SRC

** Bufler.el: a butler for your buffers

#+BEGIN_SRC emacs-lisp
(use-package bufler
  :init
  (bufler-mode))
#+END_SRC

** +Projectile+
#+begin_src emacs-lisp :tangle no
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  ;; :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;(when (file-directory-p "~/Documents")
    ;(setq projectile-project-search-path '("~/Documents")))
  (setq projectile-switch-project-action #'magit-status
        projectile-completion-system 'default))

;; (use-package consult-projectile)

(use-package ripgrep)
#+end_src

** Tab-bar-mode

#+BEGIN_SRC emacs-lisp
(use-package tab-bar
  :straight nil
  :init
  (tab-bar-mode)
  :custom
  (tab-bar-show nil))
#+END_SRC 

* Version Control
** Magit
#+begin_src emacs-lisp
(use-package magit)
#+end_src

** Forge: issue GitHub pull requests and more

#+BEGIN_SRC emacs-lisp
;; (use-package forge
;;   :after magit)
;; TODO set up personal access token personal to work with pull requests from Emacs  :after magit)
#+END_SRC  

* Org Mode
** Basic config
The very basics for Org-mode, setting up fonts and basic visual features.

#+begin_src emacs-lisp

(defun ns/org-mode-setup ()
  (org-indent-mode)
  (diminish 'org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

;; Org Mode
(use-package org
  :straight (:type built-in)
  :bind
  ("C-c l" . org-store-link)
  :hook (org-mode . ns/org-mode-setup)
  :config
  :custom
  (org-ellipsis "â€¦")
  (org-pretty-entities t)
  (org-pretty-entities-include-sub-superscripts nil)
  (org-hide-emphasis-markers t)

  (org-use-property-inheritance t)

  (org-directory "~/Documents/notes")
  (org-default-notes-file "~/Documents/notes/notes.org")

  (org-src-tab-acts-natively t)
  (org-src-preserve-indentation t))

  ;; :general
  ;; (:keymaps 'org-mode-map :states '(normal emacs visual)
  ;;   "SPC m t" '(org-babel-tangle :which-key "Tangle current file")))
  

#+end_src

** Org-appear: auto-reveal emphasis markers at point

#+BEGIN_SRC emacs-lisp
(use-package org-appear
  :straight (org-appear :type git :host github :repo "awth13/org-appear")
  :hook (org-mode . org-appear-mode))
#+END_SRC 

** Configure Babel
#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (clojure . t)
      (C . t)
      ;; (cpp . t)
      (shell . t)
      (eshell . t)
      (java . t)
      (js . t)
      (ruby . t)
      (sql . t)))

(setq org-confirm-babel-evaluate nil)
#+end_src

** Org-agenda and org-capture
Here's where I set up my agenda system. I like to keep an inbox file where I can quickly capture new items without thinking about them and then organize them into my main agenda file later when I have time. My agenda system was directly inspired by [[https://www.labri.fr/perso/nrougier/GTD/index.html][nrougier]] and https://daryl.wakatara.com/emacs-gtd-flow-evolved

*** Basic agenda settings
#+BEGIN_SRC emacs-lisp
(setq
 org-agenda-files (directory-files-recursively "~/Documents/notes/" "\\.org$")

 org-agenda-todo-ignore-scheduled 'all
 org-agenda-todo-ignore-deadlines 'all
 org-agenda-todo-ignore-with-date 'all
 org-agenda-tags-todo-honor-ignore-options t

 org-todo-keywords '((sequence "TODO(t)" "WIP(w!)" "HOLD(h!)" "|" "DONE(d!)" "KILL(k!)"))

 org-log-done 'time    ; log the time when a task is *DONE*
 org-log-reschedule 'time
 org-log-redeadline 'time

 org-agenda-deadline-leaders '("DUE:       " "In %3d d.: " "%2d d. ago: ")
 org-agenda-scheduled-leaders '("DO:       " "Sched. %2dx: ")

 org-agenda-sticky t
 org-agenda-dim-blocked-tasks nil
 org-agenda-time-grid (quote
                       ((daily today remove-match)
                        (800 1200 1600 2000)
                        "......" "----------------")))
      
      ;org-agenda-hide-tags-regexp "."     ; hide all tags in the agenda

(add-to-list 'org-tags-exclude-from-inheritance "project")
(add-to-list 'org-tags-exclude-from-inheritance "rez")
#+END_SRC 

*** Agenda Views
~TODO~: Need to find a better way to organize this into the ~org-agenda~ section even though it depends on ~org-roam~.

#+BEGIN_SRC emacs-lisp
;; (require 'cl)
(defun cmp-date-property-stamp (prop)
  "Compare two `org-mode' agenda entries, `A' and `B', by some date property.
If a is before b, return -1. If a is after b, return 1. If they
are equal return nil."
  (lexical-let ((prop prop))
	#'(lambda (a b)

		(let* ((a-pos (get-text-property 0 'org-marker a))
			   (b-pos (get-text-property 0 'org-marker b))
			   (a-date (or (org-entry-get a-pos prop)
						   (format "<%s>" (org-read-date t nil "now"))))
			   (b-date (or (org-entry-get b-pos prop)
						   (format "<%s>" (org-read-date t nil "now"))))
			   (cmp (compare-strings a-date nil nil b-date nil nil))
			   )
		  (if (eq cmp t) nil (signum cmp))
		  ))))

(with-eval-after-load "org-roam"
  ;; Got this from https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html
  (defun ns/org-roam-files-by-tag (tag)
    "Finds the org roam files with the given TAG."
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
                :from tags
                :left-join nodes
                :on (= tags:node_id nodes:id)
                :where (= tag $s1)]
       tag))))

  (setq org-agenda-custom-commands
        '(
          ("r" "Resonance Cal" tags "Type={.}"
	       ((org-agenda-files (ns/org-roam-files-by-tag "rez"))
	        (org-overriding-columns-format
		     "%35Item %Type %Start %Fin %Rating")
	        (org-agenda-cmp-user-defined
		     (cmp-date-property-stamp "Start"))
	        (org-agenda-sorting-strategy
		     '(user-defined-down))
            (org-agenda-overriding-header "C-u r to re-run Type={.}")
            (org-agenda-mode-hook
	         (lambda ()
	           (visual-line-mode -1)
	           (setq truncate-lines 1)
	           (setq display-line-numbers-offset -1)
	           (display-line-numbers-mode 1)))
	        (org-agenda-view-columns-initially t)))
          ("u" "Super view"
           ((agenda "" ((org-agenda-span 'day)
                        (org-agenda-overriding-header "Time-Sensitive")
                        (org-super-agenda-groups
                         '(
                           (:discard (:todo ("DONE")))
                           (:name "Today"
                                  :tag ("bday" "ann" "hols" "cal" "today")
                                  :scheduled today
                                  :time-grid t
                                  ;; :todo ("WIP" "TODO")
                                  :order 0)
                           ;; (:name "Due Today"
                           ;;        :deadline today
                           ;;        :order 2)
                           ;; (:name "Overdue"
                           ;;        :deadline past)
                           ;; (:name "Reschedule"
                           ;;        :scheduled past)
                           (:name "Personal"
                                  :tag "perso")
                           (:name "School"
                                  :tag "school")
                           (:name "Work"
                                  :tag "work")))))
                           ;; (:name "Due Soon"
                           ;;        :deadline future
                           ;;        :scheduled future)
                           ;; ))))
            (tags
             (concat "w" (format-time-string "%V"))
             ((org-agenda-overriding-header
               (concat "Todos Week " (format-time-string "%V")))
              (org-super-agenda-groups
               '(
                 (:discard (:deadline t))
                 (:discard (:scheduled t))
                 (:discard (:todo ("DONE")))
                 (:name "Someday" :tag "someday")
                 (:name "Personal"
                        :and (:tag "perso" :not (:tag "someday")))
                 (:name "School"
                        :and (:tag "school" :not (:tag "someday")))
                 (:name "Work"
                        :and (:tag "work" :not (:tag "someday")))
                 ))))))
          ("t" "Todo View"
           (
            (todo "" ((org-agenda-overriding-header "")
                      (org-super-agenda-groups
                       '(
                         (:auto-category t :order 9)
                         )))))))))
#+END_SRC

*** org-super-agenda

#+BEGIN_SRC emacs-lisp 
(use-package org-super-agenda
  :after org-agenda
  :init
  ;; (setq org-agenda-skip-scheduled-if-done t
  ;;       org-agenda-skip-deadline-if-done t
  ;;       org-agenda-include-deadlines t
  ;;       org-agenda-block-separator nil
  ;;       org-agenda-compact-blocks t
  ;;       org-agenda-start-day nil
  ;;       org-agenda-span 1
  ;;       org-agenda-start-on-weekday nil)
  :config
  (org-super-agenda-mode))

#+END_SRC 
 
*** Keybindings
Define a keybinding for =org-capture= and opening up the =org-agenda=

#+BEGIN_SRC emacs-lisp
(keymap-global-set "C-c c" 'org-capture)
(keymap-global-set "C-c a" 'org-agenda)
#+END_SRC

Since the list of ~org-agenda-files~ is initialized statically when Emacs restarts, tasks added to a new org roam dailies file might not show up in the current session unless they're manually added in.

#+BEGIN_SRC emacs-lisp
(defun ns/org-agenda-reload-files ()
  (interactive)
  (message "Reloading agenda files")
  (setq org-agenda-files (directory-files-recursively "~/Documents/notes/" "\\.org$")))

(keymap-global-set "C-c r" 'ns/org-agenda-reload-files)
#+END_SRC

** Org-present

#+BEGIN_SRC emacs-lisp

(defun ns/org-present-begin ()
  (setq-local ns/olivetti-mode-enabled (bound-and-true-p olivetti-mode)) ;; remember if olivetti was already enabled or not
  (olivetti-mode 1)                                                      ;; enable olivetti-mode regardless

  ;; Tweak the font sizes
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 4.0) variable-pitch)
                                     (org-document-title (:height 1.75) org-document-title)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))

  ;; Set a blank header line string to create some blank space at the top
  (setq-local header-line-format " ")

  (message "Starting presentation. Good luck!"))

(defun ns/org-present-end ()
  (unless (symbol-value 'ns/olivetti-mode-enabled)
    (olivetti-mode 0))                                                   ;; disable olivetti-mode only if it wasn't open before the presentation

  ;; Reset the font customizations
  (setq-local face-remapping-alist '((default variable-pitch default)))

  ;; Reset the header line back to nothing
  (setq-local header-line-format nil)

  (message "Ending presentation. Nice job!"))

(use-package org-present
  :config
  (add-hook 'org-present-mode-hook 'ns/org-present-begin)
  (add-hook 'org-present-mode-quit-hook 'ns/org-present-end))

#+END_SRC 

** +Org-modern+
Give Org-mode documents some extra visual polish.

#+BEGIN_SRC emacs-lisp :tangle no

;; (use-package org-modern
;;   :config
;;   (global-org-modern-mode))
;;     :config
;;     (add-hook 'org-mode-hook #'org-modern-mode)
;;     (add-hook 'org-agenda-finalize #'org-modern-agenda))

#+END_SRC

* Note Taking
** Org-roam

#+BEGIN_SRC emacs-lisp
(use-package emacsql-sqlite-builtin)

(use-package org-roam
  :diminish
  :bind
  (:prefix-map ns/notes-prefix-map
               :prefix "C-c n"
               ("l" . org-roam-buffer-toggle)
               ("f" . org-roam-node-find)
               ("g" . org-roam-graph)
               ("i" . org-roam-node-insert)
               ("c" . org-roam-capture)
               ;; Dailies
               ("d" . org-roam-dailies-goto-today)
               ("j" . org-roam-dailies-capture-today))
  :custom
  (org-roam-directory (file-truename "~/Documents/notes/"))
  (org-roam-file-extensions '("org" "md"))
  (org-roam-dailies-directory "logs")
  (org-roam-database-connector 'sqlite-builtin)
  (org-roam-capture-templates
   '(("d" "default" plain (file "~/Documents/notes/capture-templates/default.org")
      :target (file "${slug}.org")
      :unnarrowed t)
     ("r" "Rez" plain (file "~/Documents/notes/capture-templates/rez.org")
      :target (file "${slug}.org")
      :unnarrowed t)
     ("p" "Project" plain (file "~/Documents/notes/capture-templates/project.org")
      :target (file "${slug}.org")
      :unnarrowed t)
     ("7" "Weekly" plain (file "~/Documents/notes/capture-templates/weekly.org")
      :target (file "logs/${slug}.org")
      :unnarrowed t)))
  (org-roam-dailies-capture-templates
      '(("d" "default" plain
         (file "~/Documents/notes/capture-templates/daily.org")
         :target (file "%<%Y-%m-%d>.org"))))
  :init
  (setq org-roam-v2-ack t)
  :config
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-enable))
(require 'org-roam) ;; Force org-roam to load
#+END_SRC

** consult-org-roam
#+BEGIN_SRC emacs-lisp
(use-package consult-org-roam
  :diminish
  :after org-roam
  :init
  (require 'consult-org-roam)
  (consult-org-roam-mode 1)
  :custom
  (consult-org-roam-grep-func #'consult-ripgrep)
  (consult-org-roam-buffer-narrow-key ?r)
  (consult-org-roam-buffer-after-buffers nil)
  :config
  ;; Eventually suppress previewing for certain functions
  (consult-customize
   consult-org-roam-forward-links
   :preview-key (kbd "M-."))
  :bind
  ;; Define some convenient keybindings as an addition
  ("C-c n f" . consult-org-roam-file-find)
  ("C-c n b" . consult-org-roam-backlinks)
  ("C-c n l" . consult-org-roam-forward-links)
  ("C-c n s" . consult-org-roam-search))
#+END_SRC

** Org-roam-ui
#+BEGIN_SRC emacs-lisp
(use-package org-roam-ui
  :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;  :hook (after-init . org-roam-ui-mode)
    :custom
    (org-roam-ui-sync-theme t)
    (org-roam-ui-follow t)
    (org-roam-ui-update-on-save t)
    (org-roam-ui-open-on-start t))
#+END_SRC

* Shells/Terminal Emulators
** with-editor-async-shell-command
#+BEGIN_SRC emacs-lisp
(keymap-global-set "M-&" 'with-editor-async-shell-command)
#+END_SRC

** Vterm
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :straight nil
  :custom
  (vterm-shell "fish")
  (vterm-max-scrollback 10000))

(use-package multi-vterm
  :bind
  (:prefix-map ns/multi-vterm-prefix-map
               :prefix "C-c v"
               ("v" . multi-vterm)
               ("C-p" . multi-vterm-prev)
               ("p" . multi-vterm-prev)
               ("C-n" . multi-vterm-next)
               ("n" . multi-vterm-next)
               ("t" . multi-vterm-dedicated-toggle)
               ("p" . multi-vterm-project)
               ("r" . multi-vterm-rename-buffer)))
  ;; :general
  ;; (ns/leader-def
  ;;   "v" '(:ignore t :which-key "terminal")
  ;;   "vv" '(multi-vterm :which-key "open new term")
  ;;   "vp" '(multi-vterm-prev :which-key "prev term")
  ;;   "vn" '(multi-vterm-next :which-key "next term")
  ;;   "vr" '(multi-vterm-rename-buffer :which-key "rename term")))
#+END_SRC 

* Programming
** General Tools
*** LSP: Language-server protocols

#+begin_src emacs-lisp
;; (use-package lsp-mode
;;     :commands (lsp lsp-deferred)
;;     :custom
;;     (lsp-keymap-prefix "C-c l")
;;     (lsp-enable-which-key-integration t)
;;     (lsp-lens-enable t)
;;     (lsp-signature-auto-activate nil)
;;     (lsp-ui-doc-mode t))
;;     :custom

;;     ;; Enable/disable type hints as you type for Rust
;;     (lsp-rust-analyzer-server-display-inlay-hints t)
;;     (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
;;     (lsp-rust-analyzer-display-chaining-hints nil)
;;     (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
;;     (lsp-rust-analyzer-display-closure-return-type-hints t)
;;     (lsp-rust-analyzer-display-parameter-hints t)
;;     (lsp-rust-analyzer-display-reborrow-hints nil))

;; ;; (use-package lsp-ivy)

;; (use-package lsp-ui
;;     :hook (lsp-mode . lsp-ui-mode)
;;     :custom
;;     (lsp-ui-peek-always-show t)
;;     (lsp-ui-sideline-show-hover t)
;;     (lsp-ui-doc-position 'bottom)
;;     (lsp-ui-doc-enable nil))

#+end_src
 
*** Treesitter

#+BEGIN_SRC emacs-lisp
(setq treesit-language-source-alist
   '((bash "https://github.com/tree-sitter/tree-sitter-bash")
     (cmake "https://github.com/uyha/tree-sitter-cmake")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (go "https://github.com/tree-sitter/tree-sitter-go")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (make "https://github.com/alemuller/tree-sitter-make")
     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (rust "https://github.com/tree-sitter/tree-sitter-rust")
     (toml "https://github.com/tree-sitter/tree-sitter-toml")
     (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
     (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

(customize-set-variable 'treesit-font-lock-level 4)
#+END_SRC

**** treesit-auto: install Treesitter grammars automatically

#+BEGIN_SRC emacs-lisp :tangle no
(use-package treesit-auto
  :straight (:type git :host github :repo "renzmann/treesit-auto")
  :custom
  (treesit-auto-install 'prompt)
  :config
  (global-treesit-auto-mode))
#+END_SRC

*** Company: Auto completion
A good code-completion package. I might consider switching to Corfu at some point.

#+begin_src emacs-lisp

;; (use-package company
;;     :hook (prog-mode . company-mode)
;;     :bind (:map company-active-map
;;         ("<tab>" . company-complete-selection))
;;         ;; (:map lsp-mode-map
;;         ;; ("<tab>" . company-indent-or-complete-common))
;;     :custom
;;     (company-minimum-prefix-length 1)
;;     (company-idle-delay 0.0))

;; ;; Adds colors and icons to company-mode
;; (use-package company-box
;;     :hook (company-mode . company-box-mode))

#+end_src

*** Eglot: Language-server protocols

#+BEGIN_SRC emacs-lisp
(use-package eglot
  :bind
  (:prefix-map ns/eglot-actions-map
               :prefix "C-c e"
               ("a" . eglot-code-actions)
               ("f" . eglot-format-buffer))
  :custom
  (eglot-events-buffer-size 0) ; Disable the events buffer for performance
  (eglot-send-changes-idle-time 0.5)

  ;; TODO: (hopefully) temporary hack for Treesitter support
  :hook
  (eglot-managed-mode . eglot-inlay-hints-mode)
  :config
  (add-to-list 'eglot-server-programs
               '(python-ts-mode . ("pylsp")))
  (add-to-list 'eglot-server-programs
               `(rustic-mode . ("/home/nsalesky/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rust-analyzer"
                                :initializationOptions
                                (:procMacro (:attributes (:enable t)
                                                         :enable t)
                                 :cargo (:buildScripts (:enable t))
                                 :diagnostics (:disabled ["unresolved-proc-macro"
                                                          "unresolved-macro-call"])))))
  (add-to-list 'eglot-server-programs
               '(svelte-mode . ("svelteserver" "--stdio"))))
#+END_SRC 

*** Corfu: Completion at point

Configure the ~corfu~ completion-at-point package. This configuration was inspired by the official documentation and [[https://kristofferbalintona.me/posts/202202270056/][here]].

#+BEGIN_SRC emacs-lisp
(use-package corfu
  :straight (corfu :files (:defaults "extensions/*")
                   :includes (corfu-info corfu-history))
  :bind
  (:map corfu-map
        ("C-n" . corfu-next)
        ("C-p" . corfu-previous)
        ("<escape>" . corfu-quit)
        ("C-g" . corfu-quit)
        ("<return>" . corfu-insert)
        ("M-d" . corfu-show-documentation)
        ("M-l" . corfu-show-location))

  :custom
  (corfu-auto t)
  (corfu-auto-prefix 3) ; Minimum length of prefix for auto-complete
  (corfu-auto-delay 0) ; Immediately start auto-completion

  (corfu-popupinfo-delay 0)

  (corfu-min-width 80) ; Min width of popup, I like to have it consistent
  (corfu-max-width corfu-min-width) ; Always have the same width
  (corfu-count 14) ; Max number of candidates to show
  (corfu-scroll-margin 4)
  ;; (corfu-cycle nil)

  ;; (corfu-quit-at-boundary nil)
  ;; (corfu-seperator ?\s)            ; Use space
  ;; (corfu-quit-no-match 'seperator) ; Don't quit if there is 'corfu-seperator' inserted
  ;; (corfu-quit-no-match t)
  (corfu-preview-current 'insert)  ; Preview first candidate
  (corfu-preselect-first t)        ; Preselect first candidate?

  ;; Enable indentation+completion using the TAB key instead of M-TAB
  (tab-always-indent 'complete)
  ;; (completion-cycle-threshold nil)

  (corfu-excluded-modes '(eshell-mode))

  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode))

;; Example 4: Define a defensive Dabbrev Capf, which accepts all inputs.  If you
;; use Corfu and `corfu-auto=t', the first candidate won't be auto selected even
;; if `corfu-preselect=first'. You can use this instead of `cape-dabbrev'.
(defun my-cape-dabbrev-accept-all ()
  (cape-wrap-accept-all #'cape-dabbrev))

(use-package cape
  :init
  (add-to-list 'completion-at-point-functions #'my-cape-dabbrev-accept-all))
  

(use-package kind-icon
  :custom
  (kind-icon-default-face 'corfu-default)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+END_SRC 

*** Format All The Code: Simple code formatting
A simple code formatting system for a ton of languages.

#+begin_src emacs-lisp

(use-package format-all)
  ;:hook
  ;(prog-mode . format-all-mode)

#+end_src

*** Flymake
#+BEGIN_SRC emacs-lisp
(use-package flymake
  :bind
  (:map flymake-mode-map
        ("M-p" . flymake-goto-prev-error)
        ("M-n" . flymake-goto-next-error)))
#+END_SRC 

*** +Breadcrumb: header line for project structure+
#+BEGIN_SRC emacs-lisp :tangle no
(use-package breadcrumb
  :straight (:type git :host github :repo "joaotavora/breadcrumb")
  :hook (prog-mode . breadcrumb-local-mode))
#+END_SRC

*** Verb

#+BEGIN_SRC emacs-lisp
(use-package verb
  :after (org)
  :config
  (define-key org-mode-map (kbd "C-c C-r") verb-command-map))
#+END_SRC

*** envrc: set variables and configure project environments

#+BEGIN_SRC emacs-lisp
(use-package envrc
  :straight (envrc :type git :host github :repo "purcell/envrc")
  :config
  (envrc-global-mode))

; (use-package inheritenv
;   :straight (inheritenv :type git :host github :repo "purcell/inheritenv"))
#+END_SRC

*** ws-butler
#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :diminish ws-butler-mode
  :hook
  (prog-mode . ws-butler-mode))
#+END_SRC

*** imenu-list

#+BEGIN_SRC emacs-lisp
(use-package imenu-list)
#+END_SRCp

*** RE-Builder
A pretty useful tool for debugging regular expressions. I use the ~string~ mode so that I don't have to backslash the backslashes.

#+BEGIN_SRC emacs-lisp
(use-package re-builder
  :custom
  (reb-re-syntax 'string))
#+END_SRC 

** Languages
*** YAML
#+BEGIN_SRC emacs-lisp

(use-package yaml-mode
  :mode "\\.yml\\'")

#+END_SRC 

*** C/C++
#+begin_src emacs-lisp

;; (add-hook 'c-mode-hook 'lsp)
;; (add-hook 'c++-mode-hook 'lsp)
(add-hook 'c-mode-hook 'eglot-ensure)
(add-hook 'c++-mode-hook 'eglot-ensure)

#+end_src

*** Docker
Adds syntax highlighting and other small features for ~Dockerfile~ files.

#+BEGIN_SRC emacs-lisp

;; (use-package dockerfile-mode
;;   :mode "Dockerfile\\'")

#+END_SRC 

*** Clojure

#+BEGIN_SRC emacs-lisp
(defun ns/setup-cider-format-hook
    ()
  (add-hook 'before-save-hook 'cider-format-buffer nil t))

(use-package clojure-mode
  :mode "\\.clj\\'")

(use-package cider
  :hook
  (clojure-mode . ns/setup-cider-format-hook)
  (clojurescript-mode . ns/setup-cider-format-hook)
  (clojurec-mode . ns/setup-cider-format-hook))
#+END_SRC 

*** Gameboy

#+BEGIN_SRC emacs-lisp
(use-package rgbds-mode
  :straight (rgbds-mode :type git :host github :repo "japanoise/rgbds-mode")
  :mode ("\\.rgbasm\\'" "\\.rgbinc\\'"))
#+END_SRC

*** GLSL: OpenGL shaders

#+BEGIN_SRC emacs-lisp

(use-package glsl-mode
  :mode ("\\.glsl\\'" "\\.vert\\'" "\\.frag\\'" "\\.geom\\'"))

#+END_SRC

*** Go
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :mode "\\.go\\'"
  :hook (go-mode . eglot-ensure))
#+END_SRC 

*** LaTeX
Recompile LaTeX documents automatically when saved. 

#+BEGIN_SRC emacs-lisp
(defun ns/compile-tex-doc ()
  "Asynchronously compile the current tex buffer to a pdf."
  (start-process "pdflatex" nil "pdflatex" (buffer-file-name)))
  ;; (async-shell-command (concat "pdflatex " (buffer-file-name))))

(use-package tex-mode
  :hook (latex-mode . (lambda () (add-hook 'after-save-hook #'ns/compile-tex-doc nil t))))
#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode "\\.md\\'")
#+END_SRC 

*** Nix
#+BEGIN_SRC emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+END_SRC

*** Protobuf
#+BEGIN_SRC emacs-lisp
(use-package protobuf-mode
  :mode "\\.proto\\'")
#+END_SRC

*** Python
#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :hook (python-mode . eglot-ensure)
  ;; :hook (python-mode . (lambda ()
                         ;; (eglot-ensure)
                         ;; (setq tab-width 4)))
  :custom
  (python-shell-interpreter "python3")
  :config
  (setq python-ts-mode-hook python-mode-hook))
#+END_SRC

*** Svelte
#+BEGIN_SRC emacs-lisp
(define-derived-mode svelte-mode
  web-mode "Svelte"
  "Major mode for Svelte.")

(use-package svelte-mode :straight nil
  :hook (svelte-mode . eglot-ensure)
  :mode "\\.svelte\\'")
#+END_SRC

*** Typescript

#+begin_src emacs-lisp :results output
(use-package typescript-mode
  :mode ("\\.ts\\'" "\\.tsx\\'" "\\.js\\'" "\\.jsx\\'")
  :hook (typescript-mode . eglot-ensure)
  :config
  (setq typescript-indent-level 4))

;; (defun tide-completion-at-point ()
;;   (let ((prefix (progn (looking-back "[a-zA-Z_$]\*" 50 t) (match-string 0))))
;;     (tide-command:completions
;;      prefix
;;      `(lambda (response)
;;         (completion-in-region (- (point) (length ',prefix)) (point)
;;                               (loop for completion in response
;;                                     if (string-prefix-p ',prefix completion)
;;                                     collect completion))))))

;; (defun ns/setup-tide-mode ()
;;   (interactive)
;;   (tide-setup)
;;   (tide-hl-identifier-mode +1)
;;   (add-hook 'before-save-hook #'tide-format-before-save nil t)
;;   (add-hook 'completion-at-point-functions #'tide-completion-at-point nil t))
;;   ;; (add-hook 'completion-at-point-functions (cape-company-to-capf #'company-tide) nil t))

;; (use-package tide
;;   :after web-mode
;;   :init
;;   :hook
;;   (typescript-mode . ns/setup-tide-mode)
;;   :custom
;;   (tide-format-options '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil)))
  ;; (tide-completion-setup-company-backend t))

#+end_src

*** Ruby

#+BEGIN_SRC emacs-lisp
(use-package ruby-mode)

(use-package inf-ruby) ;; Interact with a Ruby REPL

(use-package robe
  :hook (ruby-mode . robe-mode)
  :hook (ruby-ts-mode . robe-mode))
#+END_SRC

*** Rust
Inspired by https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/
Eglot ~rust-analyzer~ configuration provided by https://gist.github.com/casouri/0ad2c6e58965f6fd2498a91fc9c66501

Most Rustic keybindings begin with =C-c C-c=

#+begin_src emacs-lisp

;; (defun ns/setup-eglot-rust ()
;;   (setq-local eglot-workspace-configuration
;;               '(:rust-analyzer
;;                 (:procMacro (:attributes (:enable t)
;;                                          :enable t)
;;                             :cargo (:buildScripts (:enable t))
;;                             :diagnostics (:disabled ["unresolved-proc-macro"
;;                                                      "unresolved-macro-call"])))))

;; (defclass eglot-rust-analyzer (eglot-lsp-server) ()
;;   :documentation "A custom class for rust-analyzer.")

;; (cl-defmethod eglot-initialization-options ((server eglot-rust-analyzer))
;;   eglot-workspace-configuration)

(use-package rustic
  :custom
  (rustic-lsp-client 'eglot)
  (rustic-format-on-save t)
  :hook
  (rustic-mode . (lambda () (flycheck-mode -1)))
  (rustic-mode . eglot-ensure))
#+end_src

*** Web
Editing in a mixed-language web format.

#+BEGIN_SRC emacs-lisp
;; (defun ns/toggle-web-mode ()
;;   "Toggles web-mode on or off, switching back to the previous major mode when disabled."
;;   (interactive)
;;   (if (eq 'web-mode major-mode)
;;       (funcall (symbol-value 'ns/prev-major-mode))
;;     (progn
;;       ;; (setq-local ns/prev-major-mode major-mode)
;;       (set (make-local-variable 'ns/prev-major-mode) major-mode)
;;       (web-mode))))

(use-package web-mode
    :commands (web-mode)
    :mode (("\\.html" . web-mode)
            ("\\.htm" . web-mode)
            ;; ("\\.tsx\\'" . web-mode)
            ;; ("\\.jsx\\'" . web-mode)
            ("\\.mustache\\'" . web-mode)
            ("\\.phtml\\'" . web-mode)
            ("\\.as[cp]x\\'" . web-mode)
            ("\\.erb\\'" . web-mode)
            ("\\.sgml\\'" . web-mode)
            ("\\.svelte\\'" . web-mode)))
    ;; :bind
    ;; ("C-c h" . ns/toggle-web-mode))
#+END_SRC 

* Utilities
** Visit Important files
A little transient function for visiting my common files that aren't accessible through ~org-roam~.

#+BEGIN_SRC emacs-lisp

(require 'transient)

(define-prefix-command 'ns/files-map)
(keymap-global-set "C-c f" 'ns/files-map)

(transient-define-prefix ns/visit-note-transient ()
  "Visit common note files."
  ["Visit common note files"
   ["Agenda"
    ("a" "agenda.org" (lambda () (interactive) (find-file (expand-file-name "agenda.org" org-directory))))
    ("p" "projects.org" (lambda () (interactive) (find-file (expand-file-name "projects.org" org-directory))))
    ("i" "inbox.org" (lambda () (interactive) (find-file (expand-file-name "inbox.org" org-directory))))
    ]
   ["Config"
    ("c" "config.org" (lambda () (interactive) (find-file (expand-file-name "config.org" user-emacs-directory))))
    ("I" "init.el" (lambda () (interactive) (find-file (expand-file-name "init.el" user-emacs-directory))))
    ]
   ])

(define-key 'ns/files-map (kbd "f") 'ns/visit-note-transient)

#+END_SRC
** Open file as superuser

#+BEGIN_SRC emacs-lisp
(defun ns/sudo-find-file (filename)
  (interactive "F")
  (find-file (concat "/sudo::"
                     (expand-file-name filename))))
#+END_SRC

* Documents
** PDFs

#+BEGIN_SRC emacs-lisp
(use-package tablist)

(use-package pdf-tools
  :straight nil
  :config
  (pdf-loader-install))
#+END_SRC

Extends ~saveplace-mode~ with support for PDFs using ~pdf-tools~
#+BEGIN_SRC emacs-lisp
(use-package saveplace-pdf-view)
#+END_SRC
 
