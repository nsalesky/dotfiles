#+TITLE: Config
#+AUTHOR: Nick Salesky
#+DESCRIPTION: Nick's personal config for Doom Emacs.
#+STARTUP: showeverything
#+PROPERTY: header-args :tangle yes


* TABLE OF CONTENTS :toc:
- [[#about][About]]
- [[#personal-information][Personal Information]]
- [[#ui][UI]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
  - [[#window-title][Window Title]]
  - [[#full-screen][Full Screen]]
  - [[#transparent-frame][Transparent Frame]]
- [[#keybindings][Keybindings]]
  - [[#visual-line-mode][Visual Line Mode]]
- [[#org-mode][Org Mode]]
  - [[#org-modern][Org-modern]]
  - [[#org-capture][Org-capture]]
  - [[#centered-window][Centered Window]]
  - [[#set-font-sizes-for-each-header-level-in-org][Set font sizes for each header level in Org]]
  - [[#org-journal][Org-journal]]
  - [[#org-roam][Org-roam]]
  - [[#org-remark][Org-remark]]
- [[#editor][Editor]]
  - [[#line-settings][Line Settings]]
  - [[#exit-prompt][Exit Prompt]]
  - [[#autosave][Autosave]]
  - [[#evaluate-elisp-expressions][Evaluate ELisp Expressions]]
  - [[#dired][Dired]]
  - [[#perspective][Perspective]]
  - [[#wakatime][Wakatime]]
- [[#programming][Programming]]

* About
This is my personal config for Doom Emacs that I've built with the "help" :) of many other open-source configs, blog posts, articles, etc. I try to keep it fairly synchronized with my vanilla Emacs config, but some things will of course be different. When possible, I try to attribute specific sections to the original source for both my benefit and anyone else's.

Some specific confics I looked at include:
- [[https://github.com/dakra/dmacs][Dmacs]] (the structure of this config file is heavily inspired by this!)
- DistroTube's config

* Personal Information
Set up the basic user information variables.

#+BEGIN_SRC emacs-lisp

(setq user-full-name "Nick Salesky"
      user-mail-address "nicksalesky@gmail.com")

#+END_SRC

* UI
Set up all the fancy user-interface elements to make Emacs modern.

** Fonts
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono" :size 16)
      doom-variable-pitch-font (font-spec :family "SourceSans3" :size 15)
      doom-big-font (font-spec :family "JetBrainsMono" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

** Theme
This is where I setup the default theme and also a command to let me load new themes to try them out. =flatwhite= is also a nice theme for light-mode (shudder :worried:).

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-moonlight)
(map! :leader
      :desc "Load new theme" "h t" #'counsel-load-theme)
#+END_SRC

** Modeline
Sets up the bottom status bar for all Emacs windows. More configuration options are available on [https://github.com/seagle0128/doom-modeline]

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil :font "JetBrainsMono")
(setq doom-modeline-height 30     ;; sets modeline height
      doom-modeline-bar-width 5   ;; sets right bar width
      doom-modeline-persp-name t  ;; adds perspective name to the modeline
      doom-modeline-persp-icon t) ;; adds a folder icon next to the perspective name
#+END_SRC

** Window Title
Show the buffer name and the project folder, if applicable
#+BEGIN_SRC emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ? buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p) " ◉ %s" "  ●  %s") project-name))))))
#+END_SRC

** Full Screen
Make emacs fullscreen when opened.

#+BEGIN_SRC emacs-lisp
;; (if (eq initial-window-system 'x)
;;     (toggle-frame-maximized)
;;   (toggle-frame-fullscreen))
#+END_SRC

** Transparent Frame
Creates a handy little function to toggle a semi-transparent window frame either for aeshetics or to view another window underneath Emacs.

#+BEGIN_SRC emacs-lisp

(defun ns/toggle-window-transparency ()
  "Toggle transparency."
  (interactive)
  (let ((alpha-transparency 75))
    (if (equal alpha-transparency (frame-parameter nil 'alpha-background))
        (set-frame-parameter nil 'alpha-background 100)
      (set-frame-parameter nil 'alpha-background alpha-transparency))))

#+END_SRC

* Keybindings
** Visual Line Mode
Use visual line motions even outside of visual-line-mode buffers

#+BEGIN_SRC emacs-lisp
(evil-global-set-key 'motion "j" 'evil-next-visual-line)
(evil-global-set-key 'motion "k" 'evil-previous-visual-line)
#+END_SRC

* Org Mode

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
(after! org
  (setq org-directory "~/notes"
        org-agenda-files '("~/notes/agenda.org")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-return-follows-link t  ;; pressing RET follows links
        org-ellipsis " ▼ "
        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        org-log-done 'time
        org-hide-emphasis-markers t))
        ;; org-todo-keywords ; This overwrites the default Doom org-todo-keywords
        ;; '((sequence
        ;;    "TODO(t)" ; A task that is ready to be tackled
        ;;    "WAIT(w)" ; Some thing that is holding up this task
        ;;    "HOLD(h)" ; Something that has been put on hold
        ;;    "|" ; Seperator between "active" and "inactive" states
        ;;    "DONE(d)" ; Task has been completed
        ;;    "CANCELLED(c)" ; Task has been canceled
#+END_SRC

** Org-modern
Spiff up the style a bit with =org-modern=

#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda))

#+END_SRC

** Org-capture
** Centered Window
Center the window vertically for a nice document-writing effect.

#+BEGIN_SRC emacs-lisp

;; (defun ns/org-mode-visual-fill ()
;;   (setq visual-fill-column-width 200
;;         visual-fill-column-center-text t)
;;   (visual-fill-column-mode 1))

;; (use-package visual-fill-column
;;   :hook (org-mode . ns/org-mode-visual-fill))

#+END_SRC

** Set font sizes for each header level in Org
*You can set the Org heading levels to be different font sizes.  So I choose to have level 1 headings to be 140% in height, level 2 to be 130%, etc.  Other interesting things you could play with include adding :foreground color and/or :background color if you want to override the theme colors.

#+begin_src emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.3))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
)

;(add-hook 'org-mode 'variable-pitch-mode)
#+end_src

#+RESULTS:

** Org-journal
#+BEGIN_SRC emacs-lisp
(setq org-journal-dir "~/org/journal/"
      org-journal-date-prefix "* "
      org-journal-time-prefix "** "
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org"
      org-journal-enable-agenda-integration t)
#+END_SRC

** Org-roam
*** Basic Setup

| COMMAND                         | DESCRIPTION                     | KEYBINDING  |
|---------------------------------+---------------------------------+-------------|
| org-roam-find-file              | org roam find file              | SPC n r f   |
| org-roam-insert                 | org roam insert                 | SPC n r i   |
| org-roam-dailies-find-date      | org roam dailies find date      | SPC n r d d |
| org-roam-dailies-find-today     | org roam dailies find today     | SPC n r d t |
| org-roam-dailies-find-tomorrow  | org roam dailies find tomorrow  | SPC n r d m |
| org-roam-dailies-find-yesterday | org roam dailies find yesterday | SPC n r d y |

#+BEGIN_SRC emacs-lisp
(after! org-roam
  (setq org-roam-directory "~/notes/roam"))
#+END_SRC

*** Capture Templates
This sets up the basic templates for new notes in =org-roam=

#+BEGIN_SRC emacs-lisp

(after! org-roam
  (setq org-roam-capture-templates
       '(("d" ; the "key", a letter that you press to choose the template
          "default" ; the full name of the template
          plain ; the type of text being inserted, always =plain= for note templates
          "%?" ; the text that will be inserted into the new note, can be anything
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n") ; this list describes how the note file will be created
          :unnarrowed t) ; ensures that the full file will be displayed when captured

         ;; A capture template for a programming language
         ("l" "programming language" plain
          (file "~/notes/roam/templates/programming-language-template.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
          :unnarrowed t)

         ;; A capture template for a project I'm working on
         ("p" "project" plain
          (file "~/notes/roam/templates/project-template.org")
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
          :unnarrowed t)
                        )))

#+END_SRC

#+RESULTS:
| d | default | plain | %? | :if-new | (file+head %<%Y%m%d%H%M%S>-${slug}.org #+title: ${title} |
** Org-remark
Add marginal notes for any text file!

#+begin_src emacs-lisp

(use-package org-remark
  :init
  (map! :leader
        (:prefix ("r" . "remark")
         ;; custom pen bindings
         :desc "Mark yellow" "y" #'org-remark-mark-yellow
         :desc "Mark green" "g" #'org-remark-mark-green
         :desc "Mark red" "r" #'org-remark-mark-red

         ;; general bindings
         :desc "Open current remark" "o" #'org-remark-open
         :desc "View current remark" "v" #'org-remark-view
         :desc "View previous remark" "p" #'org-remark-view-prev
         :desc "View next remark" "n" #'org-remark-view-next
         :desc "Delete remark" "d" #'org-remark-remove))
  :config

  ;; set up my pens
  (org-remark-create "orange"
                     '(:underline "gold" :background "dark orange")
                     '(CATEGORY "important"))
  (org-remark-create "green"
                     '(:background "lime green" :inherit shadow)
                     '(CATEGORY "vocab"))
  (org-remark-create "red"
                     '(:background "tomato" :underline "dark red" :inherit shadow)
                     '(CATEGORY "important"))

  (org-remark-global-tracking-mode))

#+end_src

#+RESULTS:
: t

* Editor
** Line Settings
I set comment-line to 'SPC TAB TAB' which is a rather comfortable keybinding for me on my ZSA Moonlander keyboard.  The standard Emacs keybinding for comment-line is 'C-x C-;'.  The other keybindings are for commands that toggle on/off various line-related settings.  Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t' plus 'key' for those bindings.

| COMMAND                  | DESCRIPTION                                 | KEYBINDING  |
|--------------------------+---------------------------------------------+-------------|
| comment-line             | /Comment or uncomment lines/                | SPC TAB TAB |
| hl-line-mode             | /Toggle line highlighting in current frame/ | SPC t h     |
| global-hl-line-mode      | /Toggle line highlighting globally/         | SPC t H     |
| doom/toggle-line-numbers | /Toggle line numbers/                       | SPC t l     |
| toogle-truncate-lines    | /Toggle truncate lines/                     | SPC t t     |

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
(map! :leader
      :desc "Comment or uncomment lines" "TAB TAB" #'comment-line
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers" "l" #'doom/toggle-line-numbers
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle truncate lines" "t" #'toggle-truncate-lines))
#+END_SRC

** Exit Prompt
I don't like how Doom Emacs prompts me before quitting, so I disable that functionality here. I have it disabled in =init.el=, but it still runs for some reason unless I disable it here.

#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs nil)
#+END_SRC

** Autosave
Automatically backup the contents of files that I have open at regular intervals in case of a crash. These are (currently) just the default settings
but I'm still putting them here in case I want to change them in the future.

#+BEGIN_SRC emacs-lisp
(setq auto-save-default t
      auto-save-timeout 30)
#+END_SRC

** Evaluate ELisp Expressions
Changing some keybindings from their defaults to better fit with Doom Emacs, and to avoid conflicts with my window managers which sometimes use the control key in their keybindings.  By default, Doom Emacs does not use 'SPC e' for anything, so I choose to use the format 'SPC e' plus 'key' for these.

| COMMAND         | DESCRIPTION                                    | KEYBINDING |
|-----------------+------------------------------------------------+------------|
| eval-buffer     | /Evaluate elisp in buffer/                     | SPC e b    |
| eval-defun      | /Evaluate the defun containing or after point/ | SPC e d    |
| eval-expression | /Evaluate an elisp expression/                 | SPC e e    |
| eval-last-sexp  | /Evaluate elisp expression before point/       | SPC e l    |
| eval-region     | /Evaluate elisp in region/                     | SPC e r    |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("e". "evaluate")
       :desc "Evaluate elisp in buffer" "b" #'eval-buffer
       :desc "Evaluate defun" "d" #'eval-defun
       :desc "Evaluate elisp expression" "e" #'eval-expression
       :desc "Evaluate last sexpr" "l" #'eval-last-sexp
       :desc "Evaluate elisp in region" "r" #'eval-region))
#+END_SRC

** Dired
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

*** Keybindings To Open Dired

| COMMAND    | DESCRIPTION                          | KEYBINDING |
|------------+--------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

*** Keybindings Within Dired
**** Basic dired commands

| COMMAND                | DESCRIPTION                                  | KEYBINDING |
|------------------------+----------------------------------------------+------------|
| dired-view-file        | /View file in dired/                           | SPC d v    |
| dired-up-directory     | /Go up in directory tree/                      | h          |
| dired-find-file        | /Go down in directory tree (or open if file) | l          |
| dired-next-line        | Move down to next line                       | j          |
| dired-previous-line    | Move up to previous line                     | k          |
| dired-mark             | Mark file at point                           | m          |
| dired-unmark           | Unmark file at point                         | u          |
| dired-do-copy          | Copy current file or marked files            | C          |
| dired-do-rename        | Rename current file or marked files          | R          |
| dired-hide-details     | Toggle detailed listings on/off              | (          |
| dired-git-info-mode    | Toggle git information on/off                | )          |
| dired-create-directory | Create new empty directory                   | +          |
| dired-diff             | Compare file at point with another           | =          |
| dired-subtree-toggle   | Toggle viewing subtree at point              | TAB        |

**** Dired commands using regex

| COMMAND                 | DESCRIPTION                | KEYBINDING |
|-------------------------+----------------------------+------------|
| dired-mark-files-regexp | Mark files using regex     | % m        |
| dired-do-copy-regexp    | Copy files using regex     | % C        |
| dired-do-rename-regexp  | Rename files using regex   | % R        |
| dired-mark-files-regexp | Mark all files using regex | * %        |

**** File permissions and ownership

| COMMAND         | DESCRIPTION                            | KEYBINDING |
|-----------------+----------------------------------------+------------|
| dired-do-chgrp  | Change the group of marked files       | g G        |
| dired-do-chmod  | Change the permissions of marked files | M          |
| dired-do-chown  | Change the owner of marked files       | O          |
| dired-do-rename | Rename file or marked files            | R          |


#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-up-directory
  (kbd "% l") 'dired-downcase
  (kbd "% u") 'dired-upcase
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)

;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

;; With dired-open plugin you can launch external programs for certain extensions
;;(setq dired-open-extensions '(("jpg" . "gimp")
;;                              ("mp4" . "vlc" )))




#+END_SRC

*** Keybindings Within Dired With Peep-Dired-Mode enabled
If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'

| COMMAND              | DESCRIPTION                                | KEYBINDING |
|----------------------+--------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | SPC d p    |
| peep-dired-next-file | /Move to next file in peep-dired mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired mode/ | k          |

#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC

** Perspective
Perspective provides multiple named workspaces (or "perspectives") in Emacs, similar to having multiple desktops in window managers like Awesome and XMonad.  Each perspective has its own buffer list and its own window layout, making it easy to work on many separate projects without getting lost in all the buffers.  Switching to a perspective activates its window configuration, and when in a perspective, only its buffers are available (by default).  Doom Emacs uses 'SPC some_key' for binding some of the perspective commands, so I used this binging format for the perspective bindings that I created..

| COMMAND                    | DESCRIPTION                         | KEYBINDING |
|----------------------------+-------------------------------------+------------|
| persp-switch               | Switch to perspective NAME          | SPC DEL    |
| persp-switch-to-buffer     | Switch to buffer in perspective     | SPC ,      |
| persp-next                 | Switch to next perspective          | SPC ]      |
| persp-prev                 | Switch to previous perspective      | SPC [      |
| persp-add-buffer           | Add a buffer to current perspective | SPC +      |
| persp-remove-by-name       | Remove perspective by name          | SPC -      |
| +workspace/switch-to-{0-9} | Switch to workspace /n/               | SPC 0-9    |

#+begin_src emacs-lisp
;; (map! :leader
;;       :desc "Switch to perspective NAME" "DEL" #'persp-switch
;;       :desc "Switch to buffer in perspective" "," #'persp-switch-to-buffer
;;       :desc "Switch to next perspective" "]" #'persp-next
;;       :desc "Switch to previous perspective" "[" #'persp-prev
;;       :desc "Add a buffer current perspective" "+" #'persp-add-buffer
;;       :desc "Remove perspective by name" "-" #'persp-remove-by-name)
#+end_src
** Wakatime
Setup the Wakatime minor mode to track my work across different projects. Helps me know how much time I'm wasting each day :cry:

#+begin_src emacs-lisp

(use-package wakatime-mode
  :ensure t
  :config
  (global-wakatime-mode))

#+end_src

* Programming
