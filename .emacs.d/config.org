#+title: My Emacs Configuration
#+author: Nick Salesky
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+STARTUP: overview

* Contents                                                              :TOC:
:PROPERTIES:
:TOC:      :include all
:END:

- [[#about][About]]
- [[#installation][Installation]]
- [[#emacs-initialization][Emacs Initialization]]
  - [[#set-some-early-ui-settings][Set some early UI settings]]
  - [[#package-management][Package Management]]
- [[#package-system-setup][Package System Setup]]
- [[#personal-information][Personal Information]]
- [[#configure-emacs-builtin-packages][Configure Emacs builtin packages]]
  - [[#saveplace-remember-your-location-in-a-file][Saveplace: Remember your location in a file]]
  - [[#savehist-keep-track-of-minibuffer-history][Savehist: Keep track of minibuffer history]]
  - [[#time][Time]]
- [[#ui][UI]]
  - [[#basic-emacs-appearance-settings][Basic Emacs appearance settings]]
  - [[#colors][Colors]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
  - [[#dashboard][Dashboard]]
  - [[#smooth-scrolling][Smooth Scrolling]]
  - [[#helpful][Helpful]]
- [[#ivy-and-counsel][Ivy and Counsel]]
  - [[#ivy][Ivy]]
  - [[#ivy-rich][ivy-rich]]
  - [[#ivy-posframe][ivy-posframe]]
  - [[#counsel][Counsel]]
  - [[#which-key][Which-key]]
- [[#keybindings][Keybindings]]
  - [[#generalel][General.el]]
  - [[#esc-quits-prompts][ESC quits prompts]]
  - [[#movement][Movement]]
  - [[#hydra][Hydra]]
  - [[#evil][Evil]]
  - [[#tabs-not-spaces][Tabs Not Spaces]]
  - [[#line-formatting][Line Formatting]]
  - [[#files][Files]]
  - [[#toggling][Toggling]]
  - [[#open-applications][Open Applications]]
  - [[#windows][Windows]]
  - [[#buffers][Buffers]]
  - [[#search][Search]]
  - [[#multiple-cursors][Multiple Cursors]]
- [[#org-mode][Org Mode]]
  - [[#basic-config][Basic config]]
  - [[#configure-babel][Configure Babel]]
  - [[#auto-tangle-configuration-files][Auto-tangle configuration files]]
  - [[#visual-fill][Visual fill]]
  - [[#table-of-contents][Table of Contents]]
  - [[#org-modern][Org-modern]]
  - [[#imenu-list][Imenu-list]]
  - [[#org-roam][Org-roam]]
  - [[#org-tree-slide][Org-tree-slide]]
- [[#editor][Editor]]
  - [[#olivetti][Olivetti]]
- [[#development-tools][Development Tools]]
  - [[#git][Git]]
  - [[#projectile][Projectile]]
  - [[#treemacs][Treemacs]]
  - [[#lsp-and-dap][LSP and DAP]]
  - [[#flycheck][Flycheck]]
  - [[#tree-sitter][Tree-Sitter]]
  - [[#company-mode][Company Mode]]
  - [[#format-all-the-code][Format All The Code]]
  - [[#yasnippet][YASnippet]]
  - [[#wakatime][Wakatime]]
  - [[#perspective][Perspective]]
  - [[#smartparens][SmartParens]]
- [[#language-specific-configuration][Language-specific Configuration]]
  - [[#python][Python]]
  - [[#typescript][Typescript]]
  - [[#web][Web]]
  - [[#rust][Rust]]
  - [[#cc][C/C++]]
  - [[#java][Java]]
  - [[#clojure][Clojure]]
  - [[#glsl][GLSL]]
  - [[#retro-assembly][Retro Assembly]]
- [[#documents][Documents]]
  - [[#pdfs][PDFs]]
  - [[#ebooks][Ebooks]]
- [[#temp][Temp]]

* About
This is my personal Emacs config that I've built with the "help" :) of many other open-source configs, blog posts, articles, etc. When possible, I try to attribute specific sections to the original source for both my benefit and anyone else's. I started using Emacs with the help of [[https://github.com/doomemacs/doomemacs][Doom Emacs]], so many of my keybindings and other settings are inspired by that.

One important thing is that I haven't really done any effort to shorten the Emacs loading time, so this config takes a while to start up (about 8 seconds or so on my machine). I usually just keep Emacs open or use a daemon so this isn't an issue for me, but maybe something for me to look into in the future!

Some specific configs I looked at include:

- [[https://github.com/dakra/dmacs][Dmacs]] (the structure of this config file is heavily inspired by this!)

* Installation

Installation should be fairly straightforward. The first time Emacs runs this config, it should hopefully install all the necessary packages automatically. If it doesn't prompt you, you'll need to run ~M-x all-the-icons-install-fonts~.

* Emacs Initialization

Disable certain byte compiler warnings to cut down on the noise for (usually unnecessary) errors.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC 

** Set some early UI settings

Disable the Toolbar and Menubar in the early-init.el file via ~default-frame-alist~. This is slightly faster than loading them first before turning them off.

#+BEGIN_SRC emacs-lisp :tangle early-init.el

(push '(tool-bar-lines . 0) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)

#+END_SRC 

Disable the scroll-bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC 

Disable tooltips
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
#+END_SRC 

Disable alarms
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC 

Give some breathing room with the fringe
#+BEGIN_SRC emacs-lisp
(set-fringe-mode 10)
#+END_SRC 

Disable the startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC 

Use short answers for prompts
#+BEGIN_SRC emacs-lisp
(setq use-short-answers t)
#+END_SRC 

Don't confirm nonexistent files or buffers
#+BEGIN_SRC emacs-lisp
(setq confirm-nonexistent-file-or-buffer nil)
#+END_SRC 

** Package Management

* Package System Setup
For now, I just use the standard Emacs ~package.el~ system with ~use-package~.

*** Initialize package sources
Setup the package repos to search when installing new packages.

#+BEGIN_SRC emacs-lisp

(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ;("melpa-stable" . "https://stable.melpa.org/packages/")
			 ("elpa" . "https://elpa.gnu.org/packages/")
             ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

#+END_SRC 

*** Use-Package
Set up ~use-package~ for installing further packages.

#+BEGIN_SRC emacs-lisp

;; Initalize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t) ;; Always installs packages that you use if they're not already installed

;; Make sure PATH is correct
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))

#+END_SRC 

* Personal Information
Set up the basic user information variables.

#+BEGIN_SRC emacs-lisp

(setq user-full-name "Nick Salesky"
      user-mail-address "nicksalesky@gmail.com")

#+END_SRC 

* Configure Emacs builtin packages
** Saveplace: Remember your location in a file
#+BEGIN_SRC emacs-lisp

(use-package saveplace
  :unless noninteractive
  :config
  (setq save-place-limit 1000)
  (save-place-mode))

#+END_SRC 

#+RESULTS:
: t

** Savehist: Keep track of minibuffer history
#+BEGIN_SRC emacs-lisp

(use-package savehist
  :unless noninteractive
  :defer 1
  :config
  (setq savehist-additional-variables '(compile-command kill-ring regexp-search-ring))
  (savehist-mode 1))

#+END_SRC 

#+RESULTS:

** Time
#+BEGIN_SRC emacs-lisp

;; (use-package time
;;   :defer t
;;   :config
;;   (setq display-time-24hr-format nil))

;; TODO look into displaying the current time in the modeline


#+END_SRC 

#+RESULTS:
: t

* UI
Set up all the fancy user-interface elements to make Emacs modern.

** Basic Emacs appearance settings
Set the window title to display the current file and major mode.

#+BEGIN_SRC emacs-lisp
(setq-default frame-title-format '("%b [%m]"))
#+END_SRC 


Enable global visual line mode to wrap lines properly.

#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC 

Enable line numbers globally for most modes, except the ones explicitly disabled.

#+BEGIN_SRC emacs-lisp

;; Enable line numbers
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
        term-mode-hook
        shell-mode-hook
        eshell-mode-hook
        treemacs-mode-hook
        pdf-view-mode-hook
        ))
(add-hook mode (lambda () (display-line-numbers-mode 0))))

#+END_SRC 

** Colors
Idk, this section's title is a little vague, but basically controls packages that adjust text colors in various contexts.

Give parenthases rainbow coloring depending on their nested level in all programming modes.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC 

Highlight the current line where point is present. I have this disabled for now because I was starting to find it difficult to differentiate the region from the current line.

#+BEGIN_SRC emacs-lisp
;; (add-hook 'prog-mode-hook 'hl-line-mode)
#+END_SRC 

Highlight TODO and other important tags to make them more visible.

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :config
  (global-hl-todo-mode))
#+END_SRC 

** Fonts
Set up the fonts for text rendering, pretty self explanatory :)

Here are my current font settings
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "JetBrains Mono" :height 120)
(set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height 120)
(set-face-attribute 'variable-pitch nil :font "SourceSans3" :height 140)
#+END_SRC 

Here are some of my older settings that I'm keeping around in case I ever want to switch back.
#+BEGIN_SRC emacs-lisp
;; (set-face-attribute 'default nil :font "Iosevka Nerd Font" :height 120)
;; (set-face-attribute 'fixed-pitch nil :font "Iosevka Nerd Font" :height 120)
;; (set-face-attribute 'default nil :font "Rec Mono Semi Casual" :height 120)
;; (set-face-attribute 'fixed-pitch nil :font "Rec Mono Semi Casual" :height 120)
#+END_SRC 

Also install helpful icons useful for a ton of packages to add more visual detail. *NOTE* you'll have to run ~M-x all-the-icons-install-fonts~ in order to, well, install the fonts!

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC 

Emojis!!!! Works in any text mode :smile:

#+BEGIN_SRC emacs-lisp

(use-package emojify
  :config
  (global-emojify-mode))

#+END_SRC
** Theme
Give Emacs a nice color scheme!

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init
  (load-theme 'doom-moonlight t))
#+END_SRC 

** Modeline
I use ~doom-modeline~ to manage my modeline.

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :custom ((doom-modeline-height 35))
  :init (doom-modeline-mode 1))
#+END_SRC 
** Dashboard
I like having a nice dashboard when Emacs loads in order to remember what I was last working on and (eventually!) view my ~org-agenda~ for the day. Maybe one day I'll revert to just a scratch buffer like others, but I'm sticking with this for now!

#+BEGIN_SRC emacs-lisp

;; Necessary for dashboard in order to get nice seperators between sections
(use-package page-break-lines)

(use-package dashboard
    :init
    (setq
        dashboard-image-banner-max-width 256
        dashboard-startup-banner "~/.dotfiles/.emacs.d/emacs.png"
        dashboard-center-content t
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        ;; dashboard-projects-switch-function 'projectile-switch-project
        dashboard-items '((recents . 5)
                          (projects . 5)
                          (agenda . 5)))
    :config
    (dashboard-setup-startup-hook))

#+END_SRC 
** Smooth Scrolling
Make Emacs scroll more consistently with a small margin at the bottom.

#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :init
  (setq smooth-scroll-margin 5)
  :config
  (smooth-scrolling-mode))
#+END_SRC 

** Helpful
Make the Emacs help pages more "helpful".

#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src
* Ivy and Counsel
** Ivy

#+BEGIN_SRC emacs-lisp

(use-package ivy
    :diminish
    :bind (("C-s" . swiper)
    :map ivy-minibuffer-map
    ("TAB" . ivy-alt-done)
    ("C-l" . ivy-alt-done)
    ("C-j" . ivy-next-line)
    ("C-k" . ivy-previous-line)
    :map ivy-switch-buffer-map
    ("C-k" . ivy-previous-line)
    ("C-l" . ivy-done)
    ("C-d" . ivy-switch-buffer-kill)
    :map ivy-reverse-i-search-map
    ("C-k" . ivy-previous-line)
    ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1))

#+END_SRC

** ivy-rich

#+BEGIN_SRC emacs-lisp

(use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+END_SRC

** ivy-posframe
Display specific completion dialogs in a box overlayed over the screen instead of at the bottom of the window.

#+BEGIN_SRC emacs-lisp

;; (use-package ivy-posframe
;;     :init
;;     (setq ivy-posframe-display-functions-alist
;;         '((counsel-M-x . ivy-display-function-fallback)
;;         (counsel-find-file . ivy-display-function-fallback)
;;         (swiper . ivy-display-function-fallback)
;;         (counsel-switch-buffer . ivy-display-function-fallback)
;;         (t . ivy-posframe-display)))
;;     :config
;;     (ivy-posframe-mode 1))

#+END_SRC

#+RESULTS:
: t

** Counsel
Replace many of the standard Emacs commands with more powerful versions capable of fuzzy-search.

#+begin_src emacs-lisp

(use-package counsel
    :bind (("M-x" . counsel-M-x)
    ("C-x b" . counsel-ibuffer)
    ("C-x C-f" . counsel-find-file)
    :map minibuffer-local-map
    ("C-r" . 'counsel-minibuffer-history)))

#+end_src

#+RESULTS:
: counsel-minibuffer-history

** Which-key
Display the keybindings for the commands listed in Ivy.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

#+end_src

* Keybindings
** General.el
Set up =general.el= to control all of my custom keybindings.

#+begin_src emacs-lisp

(use-package general
    :config
    (general-override-mode)
    (general-evil-setup t)
    (general-create-definer my-leader
        :keymaps '(normal visual emacs)
            :prefix "SPC")
    (general-create-definer my-local-leader
        :keymaps '(normal insert visual emacs)
        :which-key "local-leader"
        :prefix "C-q"))

#+end_src

#+RESULTS:
: t

** ESC quits prompts
Make ESC quit prompts.

#+begin_src emacs-lisp

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

#+RESULTS:
: keyboard-escape-quit

** Movement
Fundamental movement through text files

#+BEGIN_SRC emacs-lisp

;; Insert newlines when you C-n at the end of the buffer
(setq next-line-add-newlines t)

#+END_SRC 
** Hydra
*** Basic Config
Install the base Hydra package.

#+begin_src emacs-lisp
(use-package hydra)
#+end_src
*** Text Scale
Sets up a hydra to let me easily change the text scale.

#+begin_src emacs-lisp

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "up")
  ("k" text-scale-decrease "down")
  ("f" nil "finished" :exit t))

(my-leader
 "t k" '(hydra-text-scale/body :which-key "Scale text"))
#+end_src

** Evil
It's hard for me to function without VIM-style keybindings at this point, so Evil mode is a must-have feature.

#+begin_src emacs-lisp

(use-package evil
  :init
  (setq evil-want-integration t
	evil-want-keybinding nil
	evil-want-C-u-scroll t
	evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)

  ;; use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;; set the initial state for certain special modes
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
  ;; disable Evil-mode for certain buffers
  (evil-set-initial-state 'eshell-mode 'emacs))

;; Gives us default Evil configurations for a lot of other modes
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src

#+RESULTS:
: t

*** Multiple Cursors
This is an attempt to set up multiple cursors with =evil-mc=. For now, I'm trying to use the =multiple-cursors= package instead.

#+BEGIN_SRC emacs-lisp

;; (defhydra my-mc-hydra (:color pink
;;                        :hint nil
;;                        :pre (evil-mc-pause-cursors))
;;   "
;; ^Match^            ^Line-wise^           ^Manual^
;; ^^^^^^----------------------------------------------------
;; _Z_: match all     _J_: make & go down   _z_: toggle here
;; _m_: make & next   _K_: make & go up     _r_: remove last
;; _M_: make & prev   ^ ^                   _R_: remove all
;; _n_: skip & next   ^ ^                   _p_: pause/resume
;; _N_: skip & prev

;; Current pattern: %`evil-mc-pattern

;; "
;;   ("Z" #'evil-mc-make-all-cursors)
;;   ("m" #'evil-mc-make-and-goto-next-match)
;;   ("M" #'evil-mc-make-and-goto-prev-match)
;;   ("n" #'evil-mc-skip-and-goto-next-match)
;;   ("N" #'evil-mc-skip-and-goto-prev-match)
;;   ("J" #'evil-mc-make-cursor-move-next-line)
;;   ("K" #'evil-mc-make-cursor-move-prev-line)
;;   ("z" #'+multiple-cursors/evil-mc-toggle-cursor-here)
;;   ("r" #'+multiple-cursors/evil-mc-undo-cursor)
;;   ("R" #'evil-mc-undo-all-cursors)
;;   ("p" #'+multiple-cursors/evil-mc-toggle-cursors)
;;   ("q" #'evil-mc-resume-cursors "quit" :color blue)
;;   ("<escape>" #'evil-mc-resume-cursors "quit" :color blue))


;; (use-package evil-mc
;;   :config
;;   (global-evil-mc-mode)
;;   (general-define-key
;;     :states '(normal visual)
;;     :prefix "g"
;;     "z" 'my-mc-hydra/body))

#+END_SRC

#+RESULTS:
: t

** Tabs Not Spaces
I took this basic configuration from [[https://dougie.io/emacs/indentation/]]

#+begin_src emacs-lisp

(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq-default c-basic-offset 4)
(setq-default evil-shift-width 4)

;; (setq-default electric-indent-inhibit t)

;; Make the backspace properly erase the whole tab instead of removing
;; 1 space at a time
(setq backward-delete-char-untabify-method 'hungry)

;; Make Evil mode backspace delete a whole tab's worth of spaces at a time
(general-define-key
    :states 'insert
    "<backspace>" 'backward-delete-char-untabify)

#+end_src

#+RESULTS:
: hungry

** Line Formatting
Keybindings for formatting lines of text/code.

#+BEGIN_SRC emacs-lisp

(my-leader
    ;; Line formatting
    "TAB TAB" '(smart-comment :which-key "Comment or uncomment lines"))

#+END_SRC

** Files
Keybindings for working with files.

#+BEGIN_SRC emacs-lisp

;; Keep track of recently-opened files
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)

(my-leader
    "." '(counsel-find-file :which-key "Find file")

    "f" '(:ignore t :which-key "files")
    "f r" '(counsel-recentf :which-key "Open Recent Files")
    "f c" '((lambda () (interactive)(find-file "~/.dotfiles/.emacs.d/config.org")) :which-key "Open config.org"))
#+END_SRC

#+RESULTS:

** Toggling
Some keybindings for toggling different functionalities on/off.

#+BEGIN_SRC emacs-lisp

(my-leader
     "t"  '(:ignore t :which-key "toggle")
     "t s" '(counsel-load-theme :which-key "Choose theme")

     "t t" '(treemacs :which-key "Treemacs")
     "t y" '(lsp-treemacs-symbols :which-key "Treemacs Symbols"))

#+END_SRC

** Open Applications
Different keybindings to open certain applications.

#+BEGIN_SRC emacs-lisp

(my-leader
    "o" '(:ignore t :which-key "open")
    "o e" '(eshell :which-key "Open EShell"))

#+END_SRC

** Windows
Keybindings for operating windows.

#+BEGIN_SRC emacs-lisp

(my-leader
     "w" '(:ignore t :which-key "window")
     "wc" '(delete-window :which-key "Close window")
     "wv" '(split-window-right :which-key "Vertical split")
     "ws" '(split-window-below :which-key "Horizontal split")
     "wh" '(windmove-left :which-key "Select left window")
     "wj" '(windmove-down :which-key "Select down window")
     "wk" '(windmove-up :which-key "Select up window")
     "wl" '(windmove-right :which-key "Select right window"))

#+END_SRC

** Buffers
Some useful keybindings for working with buffers.

#+BEGIN_SRC emacs-lisp

(my-leader
      ;"," '(counsel-switch-buffer :which-key "Switch buffer")

      "b" '(:ignore t :which-key "buffers")
      "b k" '(kill-buffer :which-key "Kill buffer"))

#+END_SRC
*** Basics

** Search
Keybindings for searching within different contexts.

| COMMAND             | DESCRIPTION                                     | KEYBINDING |
|---------------------+-------------------------------------------------+------------|
| avy-goto-char-timer | Start typing some chars on screen, jump to them | s          |
| avy-pop-mark        | Jump back from last =avy= search                  | S          |
| swiper              | Search the current buffer                       | SPC s b    |

#+BEGIN_SRC emacs-lisp

(general-define-key
 :states 'normal
 "s" 'avy-goto-char-timer
 "S" 'avy-pop-mark)

(my-leader
  "s" '(:ignore t :which-key "search")
  "s b" '(swiper :which-key "Search buffer"))

(use-package ag
  :general
  (my-leader
    "s p" '(projectile-ag :which-key "Search project")))
#+END_SRC

#+RESULTS:

** Multiple Cursors

| Command               | Keybinding | Description                          |
| mc/mark-all-like-this | R          | Marks all parts matching the region  |
| mc/edit-lines         | L          | Adds a cursor to each line in region |

#+BEGIN_SRC emacs-lisp

(use-package multiple-cursors
  :general
  (general-define-key
    :states '(normal visual)
    "R" 'mc/mark-all-like-this
    "L" 'mc/edit-lines)
  ;; keybindings for when multiple cursors are active
  (general-define-key
   :states '(normal visual emacs)
   :keymaps 'mc/keymap
    "C-n" 'mc/mark-more-like-this-extended))

#+END_SRC

#+RESULTS:

* Org Mode
** Basic config
The very basics for Org-mode, setting up fonts and basic visual features.

#+begin_src emacs-lisp

 (defun ns/org-mode-setup ()
   (org-indent-mode)
   ;; (variable-pitch-mode 1)
   (visual-line-mode 1))

(defun ns/org-font-setup ()
  ;; Make sure that anything that should be fixed pitch in Org files actually appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit
                        'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit
                    '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit
                        '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

;; Got this from https://stackoverflow.com/questions/10969617/hiding-markup-elements-in-org-mode
(defun ns/org-toggle-emphasis ()
  "Toggle hiding/showing of org emphasis markers"
  (interactive)
  (if org-hide-emphasis-markers
      (set-variable 'org-hide-emphasis-markers nil)
    (set-variable 'org-hide-emphasis-markers t)))


(use-package org-contrib :pin nongnu)

;; Org Mode
(use-package org
    :pin elpa
    :hook (org-mode . ns/org-mode-setup)
    :config
    ;; (ns/org-font-setup)
    (setq
     ;; org-hide-emphasis-markers nil
        org-ellipsis " ▾"
        org-pretty-entities t

        org-directory "~/notes"

        org-src-tab-acts-natively t
        org-src-preserve-indentation t

        org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)"
                "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    :general
    (my-leader
      "n" '(:ignore t :which-key "notes")))

    ;; local-leader stuff
    ;; (my-local-leader
    ;;   :keymaps 'org-mode-map
    ;;   "b" '(org-babel-tangle :which-key "Org babel tangle")
    ;;   "t" '(


#+end_src

#+RESULTS:

** Configure Babel
#+begin_src emacs-lisp

(org-babel-do-load-languages 'org-babel-load-languages
    '((emacs-lisp . t)
    (python . t)))

(setq org-confirm-babel-evaluate nil)


#+end_src

#+RESULTS:
: ((py . src python) (el . src emacs-lisp) (sh . src shell) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

** Auto-tangle configuration files
Automatically tangle the =config.org= file whenever it is saved. I currently have this turned off because I prefer to be safe and run =(org-babel-tangle)= manually whenever I'm done editing this file.

#+begin_src emacs-lisp

(defun ns/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.dotfiles/.emacs.d/config.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

;(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ns/org-babel-tangle-config)))

#+end_src

** Visual fill
View Org-mode documents in a centered document view. (I replaced this with Olivetti, just keeping this around until I verify that it works well)

#+BEGIN_SRC emacs-lisp

;; (defun ns/org-mode-visual-fill ()
;;     (setq visual-fill-column-width 120
;;     visual-fill-column-center-text t)
;;     (visual-fill-column-mode 1))

;; (use-package visual-fill-column
;;     :hook (org-mode . ns/org-mode-visual-fill))

#+END_SRC

#+RESULTS:
| #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-modern-mode | ns/org-mode-visual-fill | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | ns/org-mode-setup | (lambda nil (display-line-numbers-mode 0)) | org-eldoc-load |

** Table of Contents

#+BEGIN_SRC emacs-lisp

(use-package toc-org
  :hook
  (org-mode . toc-org-mode))

#+END_SRC 

#+RESULTS:
| toc-org-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | olivetti-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | ns/org-mode-setup | (lambda nil (display-line-numbers-mode 0)) | org-eldoc-load |

** Org-modern
Give Org-mode documents some extra visual polish.

#+BEGIN_SRC emacs-lisp

;; (use-package org-modern
;;     :config
;;     (add-hook 'org-mode-hook #'org-modern-mode)
;;     (add-hook 'org-agenda-finalize #'org-modern-agenda))

#+END_SRC

** Imenu-list

#+BEGIN_SRC emacs-lisp

(use-package imenu-list
  :init
  (setq imenu-list-position 'left)
  :general
  (my-leader
   "t i" '(imenu-list-smart-toggle :which-key "Imenu")))
  

#+END_SRC 

** Org-roam

#+BEGIN_SRC emacs-lisp

(use-package org-roam
  :custom
  (org-roam-directory "~/notes/roam/")
  :config
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  :general
  (my-leader
    "n r" '(:ignore t :which-key "roam")
    ;;"n r" '(:keymap org-roam-mode-map :which-key "roam")
    "n r f" '(org-roam-node-find :which-key "Find Node")
    "n r i" '(org-roam-node-insert :which-key "Insert Node")
    "n r o" '(org-roam-node-open :which-key "Open Node")
    "n r g" '(org-roam-graph :which-key "Graph")))

#+END_SRC

#+RESULTS:

** Org-tree-slide
Make presentations in org-mode!

#+BEGIN_SRC emacs-lisp

(use-package hide-mode-line)

(defun ns/presentation-setup ()
    (setq text-scale-mode-amount 2)
    (org-display-inline-images)
    (text-scale-mode 1)
    (hide-mode-line-mode 1))

(defun ns/presentation-end ()
    (text-scale-mode 0)
    (hide-mode-line-mode 0))

(use-package org-tree-slide
    :hook ((org-tree-slide-play . ns/presentation-setup)
           (org-tree-slide-stop . ns/presentation-end))
    :custom
    (org-tree-slide-slide-in-effect nil)
    (org-tree-slide-activate-message "Presentation started!")
    (org-tree-slide-deactivate-message "Presentation finished!")
    (org-tree-slide-header t)
    (org-image-actual-width nil)
    :bind
    (:map org-mode-map
            ("<f8>" . org-tree-slide-mode)
        :map org-tree-slide-mode-map
            ("<f9>" . org-tree-slide-move-previous-tree)
            ("<f10>" . org-tree-slide-move-next-tree)
        ))

#+END_SRC

#+RESULTS:
: org-tree-slide-move-next-tree

* Editor
This section is a little vague, but I'm planning to put general packages/configuration settings here that don't fit elsewhere and help make Emacs a better editor in general.

** Olivetti

#+BEGIN_SRC emacs-lisp

(use-package olivetti
  :init
  (setq olivetti-body-width 80
        olivetti-style t)
  :hook
  (org-mode . olivetti-mode))

#+END_SRC

#+RESULTS:
| #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | olivetti-mode | org-modern-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | ns/org-mode-setup | (lambda nil (display-line-numbers-mode 0)) | org-eldoc-load |

* Development Tools
Different tools for programming.

** Git
Different packages for working with Git.

*** Magit

#+begin_src emacs-lisp

(use-package magit
  :general
  (my-leader
    "g" '(:ignore t :which-key "git")
    "g g" '(magit-status :which-key "Magit Status")))

;(use-package forge)
#+end_src

#+RESULTS:

*** Blamer.el

#+BEGIN_SRC emacs-lisp

(use-package blamer
  :general
  (my-leader
    "g b" '(global-blamer-mode :which-key "Toggle blamer mode")))

#+END_SRC

#+RESULTS:

** Projectile

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;(when (file-directory-p "~/Documents")
    ;(setq projectile-project-search-path '("~/Documents")))
  (setq projectile-switch-project-action #'projectile-dired)

  :general
  (my-leader
      "SPC" '(projectile-find-file :which-key "Find file in project")
      "p" '(:ignore t :which-key "projects")
      "p p" '(projectile-switch-project :which-key "Switch project")))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src

#+RESULTS:
: t

** Treemacs

#+begin_src emacs-lisp

(use-package treemacs)
(use-package treemacs-evil
    :after (treemacs evil))
(use-package treemacs-projectile
    :after (treemacs projectile))
(use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))
(use-package treemacs-magit
    :after (treemacs magit))
(use-package lsp-treemacs
    :after (treemacs lsp-mode)
    :config (lsp-treemacs-sync-mode 1))
(use-package treemacs-all-the-icons
  :config
  (treemacs-load-theme "all-the-icons"))

#+end_src

#+RESULTS:
: t

** LSP and DAP

#+begin_src emacs-lisp

(use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-l"
          lsp-lens-enable t
          lsp-signature-auto-activate nil)
    :config
    (lsp-enable-which-key-integration t)
    ;; :general
    ;; TODO figure this out
    ;; (my-leader
    ;;   "c" '(:ignore t :which-key "code")))
    ;; (add-hook 'lsp-after-open-hook
    ;;     (lambda ()
    ;;       (when (lsp-find-workspace 'rust-analyzer nil)
    ;;         (lsp-rust-analyzer-inlay-hints-mode))))
    :custom

    ;; Enable/disable type hints as you type for Rust
    (lsp-rust-analyzer-server-display-inlay-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints nil)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-parameter-hints t)
    (lsp-rust-analyzer-display-reborrow-hints nil))

(use-package lsp-ivy)

(use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-enable nil))

#+end_src

#+RESULTS:
| company-mode | lsp-ui-mode |

Configure DAP-Mode for debugging support

#+BEGIN_SRC emacs-lisp

(use-package dap-mode
  :config
  (dap-auto-configure-mode))

#+END_SRC 

#+RESULTS:
: t

** Flycheck
#+BEGIN_SRC emacs-lisp

(use-package flycheck)

#+END_SRC 
** Tree-Sitter

#+BEGIN_SRC emacs-lisp

(use-package tree-sitter
  :config
  (global-tree-sitter-mode)
  :hook
  (tree-sitter-mode . tree-sitter-hl-mode))

(use-package tree-sitter-langs)

#+END_SRC

#+RESULTS:

** Company Mode
A good code-completion package. I might consider switching to Corfu at some point.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
            ("<tab>" . company-complete-selection))
           (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

;; Adds colors and icons to company-mode
(use-package company-box
  :hook (company-mode . company-box-mode))


#+end_src

#+RESULTS:
: company-indent-or-complete-common

** Format All The Code
A simple code formatting system for a ton of languages.

#+begin_src emacs-lisp

(use-package format-all)
  ;:hook
  ;(prog-mode . format-all-mode)

#+end_src

** YASnippet
Add various templates to Emacs.

#+BEGIN_SRC emacs-lisp

(use-package yasnippet
  :config
  (yas-global-mode))

#+END_SRC

** Wakatime
Wakatime makes it easy for me to keep track of how much time I'm spending on various projects.

#+BEGIN_SRC emacs-lisp

(use-package wakatime-mode
  :config
  (global-wakatime-mode))

#+END_SRC
** Perspective
Add named workspaces to Emacs with their own buffers.

#+BEGIN_SRC emacs-lisp

(use-package perspective
    :init
    (setq persp-state-default-file "~/.dotfiles/.emacs.d/perspective-state"
          persp-mode-prefix-key (kbd "C-c M-p"))

    :config
    (persp-mode)

    :general
    (my-leader
      "," '(persp-ivy-switch-buffer :which-key "Switch buffer")
      "b k" '(persp-remove-buffer :which-key "Remove buffer")

      "TAB" '(:ignore t :which-key "workspace")
      "TAB ." '(persp-switch :which-key "Switch to or create a workspace")
      "TAB r" '(persp-rename :which-key "Rename workspace")
      "TAB s" '(persp-state-save :which-key "Save workspaces")
      "TAB l" '(persp-state-load :which-key "Load saved workspaces")
      "TAB k" '(persp-kill :which-key "Kill workspace")
      "TAB 1" '((lambda () (interactive)(persp-switch-by-number 1)) :which-key "Switch to workspace 1")
      "TAB 2" '((lambda () (interactive)(persp-switch-by-number 2)) :which-key "Switch to workspace 2")
      "TAB 3" '((lambda () (interactive)(persp-switch-by-number 3)) :which-key "Switch to workspace 3")
      "TAB 4" '((lambda () (interactive)(persp-switch-by-number 4)) :which-key "Switch to workspace 4")
      "TAB 5" '((lambda () (interactive)(persp-switch-by-number 5)) :which-key "Switch to workspace 5")
      "TAB 6" '((lambda () (interactive)(persp-switch-by-number 6)) :which-key "Switch to workspace 6")
      "TAB 7" '((lambda () (interactive)(persp-switch-by-number 7)) :which-key "Switch to workspace 7")
      "TAB 8" '((lambda () (interactive)(persp-switch-by-number 8)) :which-key "Switch to workspace 8")
      "TAB 9" '((lambda () (interactive)(persp-switch-by-number 9)) :which-key "Switch to workspace 9")))

#+END_SRC

#+RESULTS:

** SmartParens

#+BEGIN_SRC emacs-lisp

(use-package smartparens
  :hook
  (prog-mode . smartparens-mode))

(use-package evil-smartparens
  :hook
  (smartparens-enabled . evil-smartparens-mode))
#+END_SRC

#+RESULTS:
| evil-smartparens-mode |

* Language-specific Configuration
My configuration for each programming language workflow that I want to be able to work with.

** Python

#+BEGIN_SRC emacs-lisp

(use-package lsp-pyright
  :hook
  (python-mode . (lambda ()
                   (require 'lsp-pyright)
                   (lsp-deferred))))

#+END_SRC

#+RESULTS:
| (lambda nil (require 'lsp-pyright) (lsp-deferred)) | evil-collection-python-set-evil-shift-width | doom-modeline-env-setup-python |

** Typescript

#+begin_src emacs-lisp :results output

(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 4))

#+end_src

#+RESULTS:

** Web
Editing in a mixed-language web format.

#+BEGIN_SRC emacs-lisp

(use-package web-mode
    :commands (web-mode)
    :mode (("\\.html" . web-mode)
            ("\\.htm" . web-mode)
;           ("\\.tsx$" . web-mode)
            ("\\.mustache\\'" . web-mode)
            ("\\.phtml\\'" . web-mode)
            ("\\.as[cp]x\\'" . web-mode)
            ("\\.erb\\'" . web-mode)
            ("\\.sgml\\'" . web-mode)))

#+END_SRC 

#+RESULTS:
: ((\.sgml\' . web-mode) (\.erb\' . web-mode) (\.as[cp]x\' . web-mode) (\.phtml\' . web-mode) (\.mustache\' . web-mode) (\.htm . web-mode) (\.html . web-mode) (\.s\' . ca65-mode) (\.glsl\' . glsl-mode) (\.geom\' . glsl-mode) (\.frag\' . glsl-mode) (\.vert\' . glsl-mode) (\.rs\' . rustic-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (/git-rebase-todo\' . git-rebase-mode) (\.ts\' . typescript-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** Rust
Inspired by https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/

Most Rustic keybindings begin with =C-c C-c=

#+begin_src emacs-lisp

(use-package rustic
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)))
  ;; :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  ;; (setq rustic-format-on-save t))


#+end_src

#+RESULTS:

** C/C++

#+begin_src emacs-lisp

(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)

#+end_src

#+RESULTS:
| lsp |

** Java

#+BEGIN_SRC emacs-lisp

;; (use-package meghanada
;;   :hook
;;   (java-mode . meghanada-mode)
;;   (java-mode . flycheck-mode))

;; (setq meghanada-java-path "java"
;;       meghanada-maven-path "mvn")

(use-package lsp-java
  :hook
  (java-mode . lsp))
  

#+END_SRC

#+RESULTS:
| lsp | lsp-mode | lsp-java | flycheck-mode | meghanada-mode |

** Clojure

#+BEGIN_SRC emacs-lisp

(use-package clojure-mode
  :mode "\\.clj\\'"
  :hook ((clojure-mode . lsp-deferred)
         (clojurescript-mode . lsp-deferred)
         (clojurec-mode . lsp-deferred)))


(use-package cider)

#+END_SRC 
** GLSL

#+BEGIN_SRC emacs-lisp

(use-package glsl-mode
  :mode "\\.glsl\\'")

#+END_SRC

** Retro Assembly
My configurations for various retro assembly architectures.

*** 6502
Programming for the C64 and NES.

#+BEGIN_SRC emacs-lisp

(use-package ca65-mode
  :mode "\\.s\\'")

#+END_SRC

#+RESULTS:
: ((\.inc\' . ca65-mode) (\.epub\' . nov) (\.[pP][dD][fF]\' . pdf-view-mode) (\.clj\' . clojure-mode) (\.sgml\' . web-mode) (\.erb\' . web-mode) (\.as[cp]x\' . web-mode) (\.phtml\' . web-mode) (\.mustache\' . web-mode) (\.htm . web-mode) (\.html . web-mode) (\.s\' . ca65-mode) (\(?:build\|profile\)\.boot\' . clojure-mode) (\.cljs\' . clojurescript-mode) (\.cljc\' . clojurec-mode) (\.\(clj\|cljd\|dtm\|edn\)\' . clojure-mode) (\.glsl\' . glsl-mode) (\.geom\' . glsl-mode) (\.frag\' . glsl-mode) (\.vert\' . glsl-mode) (\.rs\' . rustic-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.rs\' . rust-mode) (/git-rebase-todo\' . git-rebase-mode) (\.ts\' . typescript-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

* Documents
** PDFs

#+BEGIN_SRC emacs-lisp

(use-package tablist)

(use-package pdf-tools
  :config
  (pdf-loader-install))

#+END_SRC 
** Ebooks

#+BEGIN_SRC emacs-lisp

(use-package nov
  :mode "\\.epub\\'")

#+END_SRC
* Temp

#+begin_src emacs-lisp

(use-package smart-comment)

#+end_src









