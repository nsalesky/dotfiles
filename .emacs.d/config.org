#+title: My Emacs Configuration
#+author: Nick Salesky
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+STARTUP: overview

* Package System Setup

#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ;("melpa-stable" . "https://stable.melpa.org/packages/")
			 ("elpa" . "https://elpa.gnu.org/packages/")
             ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initalize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t) ;; Installs packages that you use if they're not already installed

#+end_src

* Ivy and Counsel
** Basic Config

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
       :map ivy-minibuffer-map
       ("TAB" . ivy-alt-done)
       ("C-l" . ivy-alt-done)
       ("C-j" . ivy-next-line)
       ("C-k" . ivy-previous-line)
       :map ivy-switch-buffer-map
       ("C-k" . ivy-previous-line)
       ("C-l" . ivy-done)
       ("C-d" . ivy-switch-buffer-kill)
       :map ivy-reverse-i-search-map
       ("C-k" . ivy-previous-line)
       ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package ivy-posframe
    :init
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
    :config
    (ivy-posframe-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
       ("C-x b" . counsel-ibuffer)
       ("C-x C-f" . counsel-find-file)
       :map minibuffer-local-map
       ("C-r" . 'counsel-minibuffer-history)))
#+end_src
** Which-key
Display the keybindings for the commands listed in Ivy.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

#+end_src

* Appearance
** Basic UI configuration
These are the very basic configuration settings for the base Emacs appearance.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1)   ; Disable the toolbar
  (tooltip-mode -1)    ; Disable tooltips
  (set-fringe-mode 10) ; Give some breathing room
  (menu-bar-mode -1)   ; Disable the menu bar
  (setq ring-bell-function 'ignore) ; Disable alarms

  ;; Enable line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
          term-mode-hook
          shell-mode-hook
          eshell-mode-hook
          treemacs-mode-hook
          ))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))


  ;; Rainbox delimiters for all programming modes
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; Better commenting
  (use-package smart-comment)
#+end_src

#+RESULTS:

** Fonts
These are my font settings.

#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "Iosevka Nerd Font" :height 120)
(set-face-attribute 'fixed-pitch nil :font "Iosevka Nerd Font" :height 120)
(set-face-attribute 'variable-pitch nil :font "Source Sans Pro" :height 140)

#+end_src

Also install helpful icons
#+begin_src emacs-lisp

;; NOTE: The first time you run this on a new machine, you'll need to run this
;; command interactively
;;
;; M-x all-the-icons-install-fonts
(use-package all-the-icons)

#+end_src

** Line Settings

#+BEGIN_SRC emacs-lisp

;; Enable global visual line mode to wrap lines properly.
(global-visual-line-mode 1)
;; Highlight the current line in prog mode
(add-hook 'prog-mode-hook 'hl-line-mode)

#+END_SRC 

#+RESULTS:
: t

** Theme

#+begin_src emacs-lisp

(use-package doom-themes
  :init
  (load-theme 'doom-moonlight t))

#+end_src

#+RESULTS:

** Dashboard

#+begin_src emacs-lisp
    ;(use-package page-break-lines)

        ;(use-package dashboard
        ;:config
  ;(dashboard-setup-startup-hook))

#+end_src

#+RESULTS:
: t

** Modeline

#+begin_src emacs-lisp

(use-package doom-modeline
  :custom ((doom-modeline-height 35))
  :init (doom-modeline-mode 1))

#+end_src

** Helpful
Make the Emacs help pages more "helpful".

#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src
** Emoji
Display emojis in any text mode!! :smile:

#+BEGIN_SRC emacs-lisp

(use-package emojify
  :config
  (global-emojify-mode))

#+END_SRC 

* Keybindings
** General

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-override-mode)
    (general-evil-setup t)
    (general-create-definer my-leader
                :keymaps '(normal insert visual emacs)
                :prefix "SPC"
                :global-prefix "C-SPC")

    ;; Global Keybindings
    (my-leader
      ;; Projectile
      "SPC" '(projectile-find-file :which-key "Find file in project")
      "," '(counsel-switch-buffer :which-key "Switch buffer")
      "." '(counsel-find-file :which-key "Find file")
      ;"p" (:ignore t :which-key "project")

      ;; Toggle
     "t"  '(:ignore t :which-key "toggle")
     "tt" '(counsel-load-theme :which-key "Choose theme")

     ;; Line formatting
     "TAB TAB" '(smart-comment :which-key "Comment or uncomment lines")

     ;; Window
     "w" '(:ignore t :which-key "window")
     "wc" '(delete-window :which-key "Close window")
     "wv" '(split-window-right :which-key "Vertical split")
     "ws" '(split-window-below :which-key "Horizontal split")
     "wh" '(windmove-left :which-key "Select left window")
     "wj" '(windmove-down :which-key "Select down window")
     "wk" '(windmove-up :which-key "Select up window")
     "wl" '(windmove-right :which-key "Select right window")
))
#+end_src

#+RESULTS:
: t

** Basic keybindings
These are the very basic keybindings.

#+begin_src emacs-lisp

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

#+RESULTS:
: keyboard-escape-quit

** Evil
It's hard for me to function without VIM-style keybindings at this point, so Evil mode is a must-have feature.

#+begin_src emacs-lisp

(use-package evil
  :init
  (setq evil-want-integration t
	evil-want-keybinding nil
	evil-want-C-u-scroll t
	evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
  
  ;; use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

;; Gives us default Evil configurations for a lot of other modes
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src

#+RESULTS:
: t

** Hydra
*** Basic Config
Install the base Hydra package.

#+begin_src emacs-lisp
(use-package hydra)
#+end_src
*** Text Scale
Sets up a hydra to let me easily change the text scale.

#+begin_src emacs-lisp

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "up")
  ("k" text-scale-decrease "down")
  ("f" nil "finished" :exit t))

(my-leader
 "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

** Tabs Not Spaces
I took this basic configuration from [[https://dougie.io/emacs/indentation/]]

#+begin_src emacs-lisp

  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (setq-default c-basic-offset 4)
  (setq-default evil-shift-width 4)

  ;; (setq-default electric-indent-inhibit t)

  ;; Make the backspace properly erase the whole tab instead of removing
  ;; 1 space at a time
  (setq backward-delete-char-untabify-method 'hungry)


  ;; WARNING: This will change your life
  ;; (OPTIONAL) Visualize tabs as a pipe character - "|"
  ;; This will also show trailing characters as they are useful to spot.
  ;; (setq whitespace-style '(face tabs tab-mark trailing))
  ;; (custom-set-faces
  ;; '(whitespace-tab ((t (:foreground "#636363")))))

  ;; (setq whitespace-display-mappings 
  ;; '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'
  ;; (global-whitespace-mode) ; Enable whitespace mode everywhere

#+end_src

#+RESULTS:
: hungry

** Buffers
Some useful keybindings for working with buffers.

*** Basics

* Org Mode
** Basic config
The very basics for Org-mode, setting up fonts and basic visual features.

#+begin_src emacs-lisp

 (defun ns/org-mode-setup ()
   (org-indent-mode)
   ;; (variable-pitch-mode 1)
   (visual-line-mode 1))

 (defun ns/org-font-setup ()
   ;; Make sure that anything that should be fixed pitch in Org files actually appears that way
   (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
   ;; (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
   (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

(use-package org-contrib :pin nongnu)

;; Org Mode
(use-package org
    :pin elpa
    :hook (org-mode . ns/org-mode-setup)
    :config
    ;; (ns/org-font-setup)
    (setq org-hide-emphasis-markers t
    org-ellipsis " ▾"
    org-pretty-entities t

    org-directory "~/org"

    org-src-tab-acts-natively t
    org-src-preserve-indentation t

    org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)"
            "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    :general
    (my-leader
      "n" '(:ignore t :which-key "notes")))

#+end_src

#+RESULTS:

** Configure Babel
#+begin_src emacs-lisp

  (org-babel-do-load-languages 'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)))

  (setq org-confirm-babel-evaluate nil)


#+end_src

#+RESULTS:
: ((py . src python) (el . src emacs-lisp) (sh . src shell) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

** Auto-tangle configuration files
Automatically tangle the =config.org= file whenever it is saved. I currently have this turned off because I prefer to be safe and run =(org-babel-tangle)= manually whenever I'm done editing this file.

#+begin_src emacs-lisp

(defun ns/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.dotfiles/.emacs.d/config.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

;(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ns/org-babel-tangle-config)))

#+end_src

** Visual fill
View Org-mode documents in a centered document view.

#+BEGIN_SRC emacs-lisp

(defun ns/org-mode-visual-fill ()
    (setq visual-fill-column-width 120
    visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

(use-package visual-fill-column
    :hook (org-mode . ns/org-mode-visual-fill))

#+END_SRC 

#+RESULTS:
| #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-modern-mode | ns/org-mode-visual-fill | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | ns/org-mode-setup | (lambda nil (display-line-numbers-mode 0)) | org-eldoc-load |

** Org-modern
Give Org-mode documents some extra visual polish.

#+BEGIN_SRC emacs-lisp

(use-package org-modern
    :config
    (add-hook 'org-mode-hook #'org-modern-mode)
    (add-hook 'org-agenda-finalize #'org-modern-agenda))

#+END_SRC 
** Org-roam

#+BEGIN_SRC emacs-lisp

(use-package org-roam
  :custom
  (org-roam-directory "~/org/roam/")
  :config
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  :general
  (my-leader
    "n r" '(:ignore t :which-key "roam")
    ;;"n r" '(:keymap org-roam-mode-map :which-key "roam")
    "n r f" '(org-roam-node-find :which-key "Find Node")
    "n r i" '(org-roam-node-insert :which-key "Insert Node")
    "n r o" '(org-roam-node-open :which-key "Open Node")
    "n r g" '(org-roam-graph :which-key "Graph")))

#+END_SRC 

#+RESULTS:

* Development Tools
** Magit

#+begin_src emacs-lisp

(use-package magit
  :general
  (my-leader
    "g" '(magit-status :which-key "Git Status")))

;(use-package forge)
#+end_src

#+RESULTS:

** Projectile

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;(when (file-directory-p "~/Documents")
    ;(setq projectile-project-search-path '("~/Documents")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src
** Treemacs

#+begin_src emacs-lisp

  (use-package treemacs)
  (use-package treemacs-evil
    :after (treemacs evil))
  (use-package treemacs-projectile
    :after (treemacs projectile))
  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))
  (use-package treemacs-magit
    :after (treemacs magit))
  (use-package lsp-treemacs
    :after (treemacs lsp-mode)
    :config (lsp-treemacs-sync-mode 1))

#+end_src

#+RESULTS:
: t

** LSP

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-l")
    :config
    (lsp-enable-which-key-integration t)
    :general
    ;; TODO figure this out
    (my-leader
      "c" '(:keymap lsp-mode-map :which-key "code")))

  (use-package lsp-ivy)

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

#+RESULTS:
| company-mode | lsp-ui-mode |

** Company Mode
A good code-completion package. I might consider switching to Corfu at some point.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
            ("<tab>" . company-complete-selection))
           (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))


#+end_src

#+RESULTS:
: company-indent-or-complete-common

** Format All The Code
A simple code formatting system for a ton of languages.

#+begin_src emacs-lisp

(use-package format-all)
  ;:hook
  ;(prog-mode . format-all-mode)

#+end_src

** YASnippet
Add various templates to Emacs.

#+BEGIN_SRC emacs-lisp

(use-package yasnippet
  :config
  (yas-global-mode))

#+END_SRC

** Wakatime
Wakatime makes it easy for me to keep track of how much time I'm spending on various projects.

#+BEGIN_SRC emacs-lisp

(use-package wakatime-mode
  :config
  (global-wakatime-mode))

#+END_SRC 
* Language-specific Configuration
My configuration for each programming language that I want to be able to work with.

** Typescript

#+begin_src emacs-lisp

(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 4))

#+end_src

#+RESULTS:
: ((\.ts\' . typescript-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.rs\' . rustic-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (/git-rebase-todo\' . git-rebase-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** Rust

#+begin_src emacs-lisp

(use-package rustic)

#+end_src

** C/C++

#+begin_src emacs-lisp

(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)

#+end_src

#+RESULTS:
| lsp |

* Useful Settings
** Recent Files
Maintain a list of recently-opened files.

#+BEGIN_SRC emacs-lisp

(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)

;; set up keybindings
(with-eval-after-load 'general
    (my-leader
        "f" '(:ignore t :which-key "files")
        "f r" '(counsel-recentf :which-key "Open Recent Files")))
#+END_SRC 

#+RESULTS:

* Temp

#+begin_src emacs-lisp

#+end_src

