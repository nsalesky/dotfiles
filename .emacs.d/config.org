#+title: My Emacs Configuration
#+author: Nick Salesky
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+STARTUP: overview

* Package System Setup

#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ;("melpa-stable" . "https://stable.melpa.org/packages/")
			 ("elpa" . "https://elpa.gnu.org/packages/")
             ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initalize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t) ;; Installs packages that you use if they're not already installed

;; Make sure PATH is correct
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+end_src

* Ivy and Counsel
** Ivy

#+BEGIN_SRC emacs-lisp

(use-package ivy
    :diminish
    :bind (("C-s" . swiper)
    :map ivy-minibuffer-map
    ("TAB" . ivy-alt-done)
    ("C-l" . ivy-alt-done)
    ("C-j" . ivy-next-line)
    ("C-k" . ivy-previous-line)
    :map ivy-switch-buffer-map
    ("C-k" . ivy-previous-line)
    ("C-l" . ivy-done)
    ("C-d" . ivy-switch-buffer-kill)
    :map ivy-reverse-i-search-map
    ("C-k" . ivy-previous-line)
    ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1))

#+END_SRC 

** ivy-rich

#+BEGIN_SRC emacs-lisp

(use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+END_SRC 
** ivy-posframe
Display specific completion dialogs in a box overlayed over the screen instead of at the bottom of the window.

#+BEGIN_SRC emacs-lisp

(use-package ivy-posframe
    :init
    (setq ivy-posframe-display-functions-alist
        '((counsel-M-x . ivy-display-function-fallback)
        (counsel-find-file . ivy-display-function-fallback)
        (swiper . ivy-display-function-fallback)
        (t . ivy-posframe-display)))
    :config
    (ivy-posframe-mode 1))

#+END_SRC 

** Counsel
Replace many of the standard Emacs commands with more powerful versions capable of fuzzy-search.

#+begin_src emacs-lisp

(use-package counsel
    :bind (("M-x" . counsel-M-x)
    ("C-x b" . counsel-ibuffer)
    ("C-x C-f" . counsel-find-file)
    :map minibuffer-local-map
    ("C-r" . 'counsel-minibuffer-history)))

#+end_src

#+RESULTS:
: counsel-minibuffer-history

** Which-key
Display the keybindings for the commands listed in Ivy.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

#+end_src

* Appearance
** Basic UI configuration
These are the very basic configuration settings for the base Emacs appearance.

#+begin_src emacs-lisp

(setq inhibit-startup-message t)
(scroll-bar-mode -1) ; Disable visible scrollbar
(tool-bar-mode -1)   ; Disable the toolbar
(tooltip-mode -1)    ; Disable tooltips
(set-fringe-mode 10) ; Give some breathing room
(menu-bar-mode -1)   ; Disable the menu bar
(setq ring-bell-function 'ignore) ; Disable alarms

;; Window title
(setq-default frame-title-format '("%b [%m]"))

;; Enable line numbers
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
        term-mode-hook
        shell-mode-hook
        eshell-mode-hook
        treemacs-mode-hook
        ))
(add-hook mode (lambda () (display-line-numbers-mode 0))))


;; Rainbox delimiters for all programming modes
(use-package rainbow-delimiters
:hook (prog-mode . rainbow-delimiters-mode))

;; Better commenting
(use-package smart-comment)
#+end_src

#+RESULTS:

** Fonts

These are my font settings.

#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "JetBrains Mono" :height 120)
(set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height 120)
(set-face-attribute 'variable-pitch nil :font "Source Sans Pro" :height 140)

#+end_src

Also install helpful icons
#+begin_src emacs-lisp

;; NOTE: The first time you run this on a new machine, you'll need to run this
;; command interactively
;;
;; M-x all-the-icons-install-fonts
(use-package all-the-icons)

#+end_src

*** Old Font Settings
These are other font settings that I like

#+BEGIN_SRC emacs-lisp

;; (set-face-attribute 'default nil :font "Iosevka Nerd Font" :height 120)
;; (set-face-attribute 'fixed-pitch nil :font "Iosevka Nerd Font" :height 120)
;; (set-face-attribute 'default nil :font "Rec Mono Semi Casual" :height 120)
;; (set-face-attribute 'fixed-pitch nil :font "Rec Mono Semi Casual" :height 120)


#+END_SRC 

** Line Settings

#+BEGIN_SRC emacs-lisp

;; Enable global visual line mode to wrap lines properly.
(global-visual-line-mode 1)
;; Highlight the current line in prog mode
(add-hook 'prog-mode-hook 'hl-line-mode)

(use-package hl-todo
  :config
  (global-hl-todo-mode))

#+END_SRC 

#+RESULTS:
: t

** Smooth Scrolling

#+BEGIN_SRC emacs-lisp

(use-package smooth-scrolling
  :init
  (setq smooth-scroll-margin 5)
  :config
  (smooth-scrolling-mode))

#+END_SRC 

#+RESULTS:
: t

** Theme

#+begin_src emacs-lisp

(use-package doom-themes
  :init
  (load-theme 'doom-moonlight t))

#+end_src

#+RESULTS:

** Dashboard

#+begin_src emacs-lisp

;(use-package page-break-lines)

(use-package dashboard
    :config
    (dashboard-setup-startup-hook))

#+end_src

#+RESULTS:
: t

** Modeline

#+begin_src emacs-lisp

(use-package doom-modeline
  :custom ((doom-modeline-height 35))
  :init (doom-modeline-mode 1))

#+end_src

** Helpful
Make the Emacs help pages more "helpful".

#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src
** Emoji
Display emojis in any text mode!! :smile:

#+BEGIN_SRC emacs-lisp

(use-package emojify
  :config
  (global-emojify-mode))

#+END_SRC 
* Keybindings
** General.el
Set up =general.el= to control all of my custom keybindings.

#+begin_src emacs-lisp

(use-package general
    :config
    (general-override-mode)
    (general-evil-setup t)
    (general-create-definer my-leader
        :keymaps '(normal visual emacs)
            :prefix "SPC"
            :non-normal-prefix "C-SPC")
    (general-create-definer my-local-leader
        :keymaps '(normal insert visual emacs)
        :which-key "local-leader"
        :global-prefix "C-q"))

#+end_src

#+RESULTS:
: t

** ESC quits prompts
Make ESC quit prompts.

#+begin_src emacs-lisp

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

#+RESULTS:
: keyboard-escape-quit

** Hydra
*** Basic Config
Install the base Hydra package.

#+begin_src emacs-lisp
(use-package hydra)
#+end_src
*** Text Scale
Sets up a hydra to let me easily change the text scale.

#+begin_src emacs-lisp

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "up")
  ("k" text-scale-decrease "down")
  ("f" nil "finished" :exit t))

(my-leader
 "t k" '(hydra-text-scale/body :which-key "Scale text"))
#+end_src

** Evil
It's hard for me to function without VIM-style keybindings at this point, so Evil mode is a must-have feature.

#+begin_src emacs-lisp

(use-package evil
  :init
  (setq evil-want-integration t
	evil-want-keybinding nil
	evil-want-C-u-scroll t
	evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
  
  ;; use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;; set the initial state for certain special modes
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
  ;; disable Evil-mode for certain buffers
  (evil-set-initial-state 'eshell-mode 'emacs))

;; Gives us default Evil configurations for a lot of other modes
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src

#+RESULTS:
: t

*** Multiple Cursors
This is an attempt to set up multiple cursors with =evil-mc=. For now, I'm trying to use the =multiple-cursors= package instead.

#+BEGIN_SRC emacs-lisp

;; (defhydra my-mc-hydra (:color pink
;;                        :hint nil
;;                        :pre (evil-mc-pause-cursors))
;;   "
;; ^Match^            ^Line-wise^           ^Manual^
;; ^^^^^^----------------------------------------------------
;; _Z_: match all     _J_: make & go down   _z_: toggle here
;; _m_: make & next   _K_: make & go up     _r_: remove last
;; _M_: make & prev   ^ ^                   _R_: remove all
;; _n_: skip & next   ^ ^                   _p_: pause/resume
;; _N_: skip & prev

;; Current pattern: %`evil-mc-pattern

;; "
;;   ("Z" #'evil-mc-make-all-cursors)
;;   ("m" #'evil-mc-make-and-goto-next-match)
;;   ("M" #'evil-mc-make-and-goto-prev-match)
;;   ("n" #'evil-mc-skip-and-goto-next-match)
;;   ("N" #'evil-mc-skip-and-goto-prev-match)
;;   ("J" #'evil-mc-make-cursor-move-next-line)
;;   ("K" #'evil-mc-make-cursor-move-prev-line)
;;   ("z" #'+multiple-cursors/evil-mc-toggle-cursor-here)
;;   ("r" #'+multiple-cursors/evil-mc-undo-cursor)
;;   ("R" #'evil-mc-undo-all-cursors)
;;   ("p" #'+multiple-cursors/evil-mc-toggle-cursors)
;;   ("q" #'evil-mc-resume-cursors "quit" :color blue)
;;   ("<escape>" #'evil-mc-resume-cursors "quit" :color blue))


;; (use-package evil-mc
;;   :config
;;   (global-evil-mc-mode)
;;   (general-define-key
;;     :states '(normal visual)
;;     :prefix "g"
;;     "z" 'my-mc-hydra/body))

#+END_SRC 

#+RESULTS:
: t

** Tabs Not Spaces
I took this basic configuration from [[https://dougie.io/emacs/indentation/]]

#+begin_src emacs-lisp

(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq-default c-basic-offset 4)
(setq-default evil-shift-width 4)

;; (setq-default electric-indent-inhibit t)

;; Make the backspace properly erase the whole tab instead of removing
;; 1 space at a time
(setq backward-delete-char-untabify-method 'hungry)

;; Make Evil mode backspace delete a whole tab's worth of spaces at a time
(general-define-key
    :states 'insert
    "<backspace>" 'backward-delete-char-untabify)

#+end_src

#+RESULTS:
: hungry

** Line Formatting
Keybindings for formatting lines of text/code.

#+BEGIN_SRC emacs-lisp

(my-leader
    ;; Line formatting
    "TAB TAB" '(smart-comment :which-key "Comment or uncomment lines"))

#+END_SRC 
** Files
Keybindings for working with files.

#+BEGIN_SRC emacs-lisp

;; Keep track of recently-opened files
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)

(my-leader
    "." '(counsel-find-file :which-key "Find file")

    "f" '(:ignore t :which-key "files")
    "f r" '(counsel-recentf :which-key "Open Recent Files")
    "f c" '((lambda () (interactive)(find-file "~/.dotfiles/.emacs.d/config.org")) :which-key "Open config.org"))
#+END_SRC 

#+RESULTS:

** Toggling
Some keybindings for toggling different functionalities on/off.

#+BEGIN_SRC emacs-lisp

(my-leader
     "t"  '(:ignore t :which-key "toggle")
     "t s" '(counsel-load-theme :which-key "Choose theme")

     "t t" '(treemacs :which-key "Treemacs")
     "t y" '(lsp-treemacs-symbols :which-key "Treemacs Symbols"))

#+END_SRC 

** Open Applications
Different keybindings to open certain applications.

#+BEGIN_SRC emacs-lisp

(my-leader
    "o" '(:ignore t :which-key "open")
    "o e" '(eshell :which-key "Open EShell"))

#+END_SRC 
** Windows
Keybindings for operating windows.

#+BEGIN_SRC emacs-lisp

(my-leader
     "w" '(:ignore t :which-key "window")
     "wc" '(delete-window :which-key "Close window")
     "wv" '(split-window-right :which-key "Vertical split")
     "ws" '(split-window-below :which-key "Horizontal split")
     "wh" '(windmove-left :which-key "Select left window")
     "wj" '(windmove-down :which-key "Select down window")
     "wk" '(windmove-up :which-key "Select up window")
     "wl" '(windmove-right :which-key "Select right window"))

#+END_SRC 

** Buffers
Some useful keybindings for working with buffers.

#+BEGIN_SRC emacs-lisp

(my-leader
      ;"," '(counsel-switch-buffer :which-key "Switch buffer")

      "b" '(:ignore t :which-key "buffers")
      "b k" '(kill-buffer :which-key "Kill buffer"))

#+END_SRC 
*** Basics

** Search
Keybindings for searching within different contexts.

| COMMAND             | DESCRIPTION                                     | KEYBINDING |
|---------------------+-------------------------------------------------+------------|
| avy-goto-char-timer | Start typing some chars on screen, jump to them | s          |
| avy-pop-mark        | Jump back from last =avy= search                  | S          |
| swiper              | Search the current buffer                       | SPC s b    |

#+BEGIN_SRC emacs-lisp

(general-define-key
 :states 'normal
 "s" 'avy-goto-char-timer
 "S" 'avy-pop-mark)

(my-leader
  "s" '(:ignore t :which-key "search")
  "s b" '(swiper :which-key "Search buffer"))

(use-package ag
  :general
  (my-leader
    "s p" '(projectile-ag :which-key "Search project")))
#+END_SRC 

#+RESULTS:

** Multiple Cursors

| Command               | Keybinding | Description                          |
| mc/mark-all-like-this | R          | Marks all parts matching the region  |
| mc/edit-lines         | L          | Adds a cursor to each line in region |

#+BEGIN_SRC emacs-lisp

(use-package multiple-cursors
  :general
  (general-define-key
    :states '(normal visual)
    "R" 'mc/mark-all-like-this
    "L" 'mc/edit-lines)
  ;; keybindings for when multiple cursors are active
  (general-define-key
   :states '(normal visual emacs)
   :keymaps 'mc/keymap
    "C-n" 'mc/mark-more-like-this-extended)) 

#+END_SRC 

#+RESULTS:

* Org Mode
** Basic config
The very basics for Org-mode, setting up fonts and basic visual features.

#+begin_src emacs-lisp

 (defun ns/org-mode-setup ()
   (org-indent-mode)
   ;; (variable-pitch-mode 1)
   (visual-line-mode 1))

(defun ns/org-font-setup ()
  ;; Make sure that anything that should be fixed pitch in Org files actually appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit
                        'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit
                    '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit
                        '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

;; Got this from https://stackoverflow.com/questions/10969617/hiding-markup-elements-in-org-mode
(defun ns/org-toggle-emphasis ()
  "Toggle hiding/showing of org emphasis markers"
  (interactive)
  (if org-hide-emphasis-markers
      (set-variable 'org-hide-emphasis-markers nil)
    (set-variable 'org-hide-emphasis-markers t)))


(use-package org-contrib :pin nongnu)

;; Org Mode
(use-package org
    :pin elpa
    :hook (org-mode . ns/org-mode-setup)
    :config
    ;; (ns/org-font-setup)
    (setq
     ;; org-hide-emphasis-markers nil
        org-ellipsis " ▾"
        org-pretty-entities t

        org-directory "~/org"

        org-src-tab-acts-natively t
        org-src-preserve-indentation t

        org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)"
                "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    :general
    (my-leader
      "n" '(:ignore t :which-key "notes")))

    ;; local-leader stuff
    ;; (my-local-leader
    ;;   :keymaps 'org-mode-map
    ;;   "b" '(org-babel-tangle :which-key "Org babel tangle")
    ;;   "t" '(
    

#+end_src

#+RESULTS:

** Configure Babel
#+begin_src emacs-lisp

(org-babel-do-load-languages 'org-babel-load-languages
    '((emacs-lisp . t)
    (python . t)))

(setq org-confirm-babel-evaluate nil)


#+end_src

#+RESULTS:
: ((py . src python) (el . src emacs-lisp) (sh . src shell) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

** Auto-tangle configuration files
Automatically tangle the =config.org= file whenever it is saved. I currently have this turned off because I prefer to be safe and run =(org-babel-tangle)= manually whenever I'm done editing this file.

#+begin_src emacs-lisp

(defun ns/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.dotfiles/.emacs.d/config.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

;(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ns/org-babel-tangle-config)))

#+end_src

** Visual fill
View Org-mode documents in a centered document view. (I replaced this with Olivetti, just keeping this around until I verify that it works well)

#+BEGIN_SRC emacs-lisp

;; (defun ns/org-mode-visual-fill ()
;;     (setq visual-fill-column-width 120
;;     visual-fill-column-center-text t)
;;     (visual-fill-column-mode 1))

;; (use-package visual-fill-column
;;     :hook (org-mode . ns/org-mode-visual-fill))

#+END_SRC 

#+RESULTS:
| #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-modern-mode | ns/org-mode-visual-fill | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | ns/org-mode-setup | (lambda nil (display-line-numbers-mode 0)) | org-eldoc-load |

** Org-modern
Give Org-mode documents some extra visual polish.

#+BEGIN_SRC emacs-lisp

(use-package org-modern
    :config
    (add-hook 'org-mode-hook #'org-modern-mode)
    (add-hook 'org-agenda-finalize #'org-modern-agenda))

#+END_SRC 
** Org-roam

#+BEGIN_SRC emacs-lisp

(use-package org-roam
  :custom
  (org-roam-directory "~/org/roam/")
  :config
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  :general
  (my-leader
    "n r" '(:ignore t :which-key "roam")
    ;;"n r" '(:keymap org-roam-mode-map :which-key "roam")
    "n r f" '(org-roam-node-find :which-key "Find Node")
    "n r i" '(org-roam-node-insert :which-key "Insert Node")
    "n r o" '(org-roam-node-open :which-key "Open Node")
    "n r g" '(org-roam-graph :which-key "Graph")))

#+END_SRC 

#+RESULTS:

** Org-tree-slide
Make presentations in org-mode!

#+BEGIN_SRC emacs-lisp

(use-package hide-mode-line)

(defun ns/presentation-setup ()
    (setq text-scale-mode-amount 2)
    (org-display-inline-images)
    (text-scale-mode 1)
    (hide-mode-line-mode 1))

(defun ns/presentation-end ()
    (text-scale-mode 0)
    (hide-mode-line-mode 0))

(use-package org-tree-slide
    :hook ((org-tree-slide-play . ns/presentation-setup)
           (org-tree-slide-stop . ns/presentation-end))
    :custom
    (org-tree-slide-slide-in-effect nil)
    (org-tree-slide-activate-message "Presentation started!")
    (org-tree-slide-deactivate-message "Presentation finished!")
    (org-tree-slide-header t)
    (org-image-actual-width nil)
    :bind
    (:map org-mode-map
            ("<f8>" . org-tree-slide-mode)
        :map org-tree-slide-mode-map
            ("<f9>" . org-tree-slide-move-previous-tree)
            ("<f10>" . org-tree-slide-move-next-tree)
        ))

#+END_SRC 

#+RESULTS:
: org-tree-slide-move-next-tree

* Editor
This section is a little vague, but I'm planning to put general packages/configuration settings here that don't fit elsewhere and help make Emacs a better editor in general.

** Olivetti

#+BEGIN_SRC emacs-lisp

(use-package olivetti
  :init
  (setq olivetti-body-width 80
        olivetti-style t)
  :hook
  (org-mode . olivetti-mode))

#+END_SRC 

#+RESULTS:
| #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | olivetti-mode | org-modern-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | ns/org-mode-setup | (lambda nil (display-line-numbers-mode 0)) | org-eldoc-load |

* Development Tools
Different tools for programming.

** Git
Different packages for working with Git.

*** Magit

#+begin_src emacs-lisp

(use-package magit
  :general
  (my-leader
    "g" '(:ignore t :which-key "git")
    "g g" '(magit-status :which-key "Magit Status")))

;(use-package forge)
#+end_src

#+RESULTS:

*** Blamer.el

#+BEGIN_SRC emacs-lisp

(use-package blamer
  :general
  (my-leader
    "g b" '(global-blamer-mode :which-key "Toggle blamer mode")))

#+END_SRC 

#+RESULTS:

** Projectile

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;(when (file-directory-p "~/Documents")
    ;(setq projectile-project-search-path '("~/Documents")))
  (setq projectile-switch-project-action #'projectile-dired)

  :general
  (my-leader
      "SPC" '(projectile-find-file :which-key "Find file in project")
      "p" '(:ignore t :which-key "projects")
      "p p" '(projectile-switch-project :which-key "Switch project")))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src

#+RESULTS:
: t

** Treemacs

#+begin_src emacs-lisp

(use-package treemacs)
(use-package treemacs-evil
    :after (treemacs evil))
(use-package treemacs-projectile
    :after (treemacs projectile))
(use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))
(use-package treemacs-magit
    :after (treemacs magit))
(use-package lsp-treemacs
    :after (treemacs lsp-mode)
    :config (lsp-treemacs-sync-mode 1))
(use-package treemacs-all-the-icons
  :config
  (treemacs-load-theme "all-the-icons"))

#+end_src

#+RESULTS:
: t

** LSP

#+begin_src emacs-lisp

(use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-l")
    :config
    (lsp-enable-which-key-integration t)
    ;; :general
    ;; TODO figure this out
    ;; (my-leader
    ;;   "c" '(:ignore t :which-key "code")))
    ;; (add-hook 'lsp-after-open-hook
    ;;     (lambda ()
    ;;       (when (lsp-find-workspace 'rust-analyzer nil)
    ;;         (lsp-rust-analyzer-inlay-hints-mode))))
    :custom

    ;; Enable/disable type hints as you type for Rust
    (lsp-rust-analyzer-server-display-inlay-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints nil)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-parameter-hints t)
    (lsp-rust-analyzer-display-reborrow-hints nil))

(use-package lsp-ivy)

(use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-enable nil))

#+end_src

#+RESULTS:
| company-mode | lsp-ui-mode |

** Tree-Sitter

#+BEGIN_SRC emacs-lisp

(use-package tree-sitter
  :config
  (global-tree-sitter-mode)
  :hook
  (tree-sitter-mode . tree-sitter-hl-mode))

(use-package tree-sitter-langs)

#+END_SRC 

#+RESULTS:

** Company Mode
A good code-completion package. I might consider switching to Corfu at some point.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
            ("<tab>" . company-complete-selection))
           (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

;; Adds colors and icons to company-mode
(use-package company-box
  :hook (company-mode . company-box-mode))


#+end_src

#+RESULTS:
: company-indent-or-complete-common

** Format All The Code
A simple code formatting system for a ton of languages.

#+begin_src emacs-lisp

(use-package format-all)
  ;:hook
  ;(prog-mode . format-all-mode)

#+end_src

** YASnippet
Add various templates to Emacs.

#+BEGIN_SRC emacs-lisp

(use-package yasnippet
  :config
  (yas-global-mode))

#+END_SRC

** Wakatime
Wakatime makes it easy for me to keep track of how much time I'm spending on various projects.

#+BEGIN_SRC emacs-lisp

(use-package wakatime-mode
  :config
  (global-wakatime-mode))

#+END_SRC 
** Perspective
Add named workspaces to Emacs with their own buffers.

#+BEGIN_SRC emacs-lisp

(use-package perspective
    :init
    (setq persp-state-default-file "~/.dotfiles/.emacs.d/perspective-state")
    
    :config
    (persp-mode)

    :general
    (my-leader
      "," '(persp-ivy-switch-buffer :which-key "Switch buffer")
      "b k" '(persp-remove-buffer :which-key "Remove buffer")

      "TAB" '(:ignore t :which-key "workspace")
      "TAB ." '(persp-switch :which-key "Switch to or create a workspace")
      "TAB r" '(persp-rename :which-key "Rename workspace")
      "TAB s" '(persp-state-save :which-key "Save workspaces")
      "TAB l" '(persp-state-load :which-key "Load saved workspaces")
      "TAB k" '(persp-kill :which-key "Kill workspace")
      "TAB 1" '((lambda () (interactive)(persp-switch-by-number 1)) :which-key "Switch to workspace 1")
      "TAB 2" '((lambda () (interactive)(persp-switch-by-number 2)) :which-key "Switch to workspace 2")
      "TAB 3" '((lambda () (interactive)(persp-switch-by-number 3)) :which-key "Switch to workspace 3")
      "TAB 4" '((lambda () (interactive)(persp-switch-by-number 4)) :which-key "Switch to workspace 4")
      "TAB 5" '((lambda () (interactive)(persp-switch-by-number 5)) :which-key "Switch to workspace 5")
      "TAB 6" '((lambda () (interactive)(persp-switch-by-number 6)) :which-key "Switch to workspace 6")
      "TAB 7" '((lambda () (interactive)(persp-switch-by-number 7)) :which-key "Switch to workspace 7")
      "TAB 8" '((lambda () (interactive)(persp-switch-by-number 8)) :which-key "Switch to workspace 8")
      "TAB 9" '((lambda () (interactive)(persp-switch-by-number 9)) :which-key "Switch to workspace 9")))
  
#+END_SRC 

#+RESULTS:

** SmartParens

#+BEGIN_SRC emacs-lisp

(use-package smartparens
  :hook
  (prog-mode . smartparens-mode))

(use-package evil-smartparens
  :hook
  (smartparens-enabled . evil-smartparens-mode))
#+END_SRC 

#+RESULTS:
| evil-smartparens-mode |

* Language-specific Configuration
My configuration for each programming language workflow that I want to be able to work with.

** Python

#+BEGIN_SRC emacs-lisp

(use-package lsp-pyright
  :hook
  (python-mode . (lambda ()
                   (require 'lsp-pyright)
                   (lsp-deferred))))

#+END_SRC 

#+RESULTS:
| (lambda nil (require 'lsp-pyright) (lsp-deferred)) | evil-collection-python-set-evil-shift-width | doom-modeline-env-setup-python |

** Typescript

#+begin_src emacs-lisp :results output

(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 4))

#+end_src

#+RESULTS:

** Rust
Inspired by https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/

Most Rustic keybindings begin with =C-c C-c=

#+begin_src emacs-lisp

(use-package rustic
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)))
  ;; :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  ;; (setq rustic-format-on-save t))


#+end_src

#+RESULTS:

** C/C++

#+begin_src emacs-lisp

(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)

#+end_src

#+RESULTS:
| lsp |

** Java

#+BEGIN_SRC emacs-lisp

(use-package meghanada
  :hook
  (java-mode . meghanada-mode))

#+END_SRC 

#+RESULTS:
| meghanada-mode |

** GLSL

#+BEGIN_SRC emacs-lisp

(use-package glsl-mode
  :mode "\\.glsl\\'")

#+END_SRC 
** Retro Assembly
My configurations for various retro assembly architectures.

*** 6502
Programming for the C64 and NES.

#+BEGIN_SRC emacs-lisp

(use-package ca65-mode
  :mode "\\.s\\'")

#+END_SRC 
* Temp

#+begin_src emacs-lisp

#+end_src

