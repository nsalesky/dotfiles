#+title: My Emacs Configuration
#+author: Nick Salesky
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+STARTUP: overview

* Contents :TOC:
:PROPERTIES:
:TOC:      :include all
:END:

- [[#about][About]]
- [[#installation][Installation]]
- [[#emacs-initialization][Emacs Initialization]]
  - [[#set-some-early-ui-settings][Set some early UI settings]]
- [[#package-system-setup][Package System Setup]]
- [[#personal-information][Personal Information]]
- [[#configure-emacs-builtin-packages][Configure Emacs builtin packages]]
  - [[#saveplace-remember-your-location-in-a-file][Saveplace: Remember your location in a file]]
  - [[#savehist-keep-track-of-minibuffer-history][Savehist: Keep track of minibuffer history]]
  - [[#time][Time]]
  - [[#global-auto-revert-mode][Global-auto-revert-mode]]
- [[#ui][UI]]
  - [[#basic-emacs-appearance-settings][Basic Emacs appearance settings]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
  - [[#dashboard][Dashboard]]
  - [[#smooth-scrolling][Smooth Scrolling]]
  - [[#helpful][Helpful]]
  - [[#hl-todo-highlight-and-navigate-todo-keywords][Hl-todo: Highlight and navigate TODO keywords]]
  - [[#hl-line-highlight-the-current-line][Hl-line: Highlight the current line]]
  - [[#transparent-frame][Transparent Frame]]
- [[#vertico-minibuffer][Vertico: Minibuffer]]
  - [[#consult-add-helpful-functions-with-completion][Consult: add helpful functions with completion]]
  - [[#orderless-match-the-different-parts-of-completion-candidates][Orderless: match the different parts of completion candidates]]
  - [[#all-the-icons-completion-add-icons-to-completion-candidates][All-the-icons-completion: add icons to completion candidates]]
  - [[#embark][Embark]]
- [[#editor][Editor]]
  - [[#aggressive-indent-always-keep-code-properly-indented][Aggressive-indent: Always keep code properly indented]]
  - [[#rainbow-delimiters-different-color-for-each-parenthesis-level][Rainbow-delimiters: Different color for each parenthesis level]]
  - [[#smartparens-match-grouping-characters][SmartParens: Match grouping characters]]
  - [[#yasnippet-create-common-snippets][YASnippet: Create common snippets]]
  - [[#company-auto-completion][Company: Auto completion]]
  - [[#corfu-completion-at-point][Corfu: Completion at point]]
  - [[#which-key-list-commands-for-current-prefix][Which-key: List commands for current prefix]]
  - [[#olivetti-centered-document-editing][Olivetti: Centered document editing]]
  - [[#iedit-simple-multi-cursor-editing][Iedit: Simple multi-cursor editing]]
- [[#spell-checker][Spell checker]]
  - [[#flyspell][Flyspell]]
  - [[#flyspell-correct-show-list-of-correct-spelling-suggestions][Flyspell-correct: Show list of correct spelling suggestions]]
- [[#project-management][Project Management]]
  - [[#projectile][Projectile]]
  - [[#treemacs-a-tree-layout-file-explorer][Treemacs: A tree layout file explorer]]
  - [[#perspective-give-projects-their-own-named-workspaces][Perspective: Give projects their own named workspaces]]
  - [[#tab-bar-mode][Tab-bar-mode]]
- [[#keybindings-and-basic-feature-configuration][Keybindings and Basic Feature Configuration]]
  - [[#esc-quits-prompts][ESC quits prompts]]
  - [[#hydra][Hydra]]
  - [[#tabs-not-spaces][Tabs Not Spaces]]
  - [[#files][Files]]
  - [[#windows][Windows]]
  - [[#search][Search]]
  - [[#dumb-jump][Dumb-jump]]
- [[#version-control][Version Control]]
  - [[#magit][Magit]]
  - [[#forge-issue-github-pull-requests-and-more][Forge: issue GitHub pull requests and more]]
  - [[#blamer-git-blame-the-current-line][Blamer: Git blame the current line]]
- [[#org-mode][Org Mode]]
  - [[#basic-config][Basic config]]
  - [[#fonts-1][Fonts]]
  - [[#configure-babel][Configure Babel]]
  - [[#auto-tangle-configuration-files][Auto-tangle configuration files]]
  - [[#org-agenda-and-org-capture][Org-agenda and org-capture]]
  - [[#org-roam][Org-roam]]
  - [[#org-journal][Org-journal]]
  - [[#org-present][Org-present]]
  - [[#org-modern][Org-modern]]
- [[#note-taking][Note Taking]]
  - [[#denote][Denote]]
- [[#shellsterminal-emulators][Shells/Terminal Emulators]]
  - [[#term-mode][term-mode]]
  - [[#vterm][Vterm]]
- [[#programming][Programming]]
  - [[#general-tools][General Tools]]
  - [[#languages][Languages]]
- [[#irc][IRC]]
- [[#documents][Documents]]
  - [[#pdfs][PDFs]]
  - [[#ebooks][Ebooks]]
- [[#elisp-libraries][Elisp Libraries]]

* About
This is my personal Emacs config that I've built with the "help" :) of many other open-source configs, blog posts, articles, etc. When possible, I try to attribute specific sections to the original source for both my benefit and anyone else's. I started using Emacs with the help of [[https://github.com/doomemacs/doomemacs][Doom Emacs]], so many of my keybindings and other settings are inspired by that.

One important thing is that I haven't really done any effort to shorten the Emacs loading time, so this config takes a while to start up (about 8 seconds or so on my machine). I usually just keep Emacs open or use a daemon so this isn't an issue for me, but maybe something for me to look into in the future!

Some specific configs I looked at include:

- [[https://github.com/dakra/dmacs][Dmacs]] (the structure of this config file is heavily inspired by this!)
- [[https://www.youtube.com/watch?v=SCPoF1PTZpI&t=896s][System Crafters]]

* Installation

Installation should be fairly straightforward. The first time Emacs runs this config, it should hopefully install all the necessary packages automatically. If it doesn't prompt you, you'll need to run ~M-x all-the-icons-install-fonts~.

* Emacs Initialization
Add my custom ELisp files to the load-path.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.dotfiles/.emacs.d/lisp")
#+END_SRC 

Disable certain byte compiler warnings to cut down on the noise for (usually unnecessary) errors.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local)
      native-comp-async-report-warnings-errors nil)
#+END_SRC 

Increase the garbage collection threshold and process data chunking for performance.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 100000000
      read-process-output-max (* 1024 1024))
#+END_SRC 

** Set some early UI settings

Disable the Toolbar and Menubar in the early-init.el file via ~default-frame-alist~. This is slightly faster than loading them first before turning them off.

#+BEGIN_SRC emacs-lisp :tangle early-init.el

(push '(tool-bar-lines . 0) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)

#+END_SRC 

Disable the scroll-bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC 

Disable tooltips
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
#+END_SRC 

Disable alarms
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC 

Give some breathing room with the fringe
#+BEGIN_SRC emacs-lisp
(set-fringe-mode 10)
#+END_SRC 

Disable the startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC 

Use short answers for prompts
#+BEGIN_SRC emacs-lisp
(setq use-short-answers t)
#+END_SRC 

Don't confirm nonexistent files or buffers
#+BEGIN_SRC emacs-lisp
(setq confirm-nonexistent-file-or-buffer nil)
#+END_SRC 

* Package System Setup
I'm using =straight.el= with =use-package= to install and configure packages

Set up =straight.el=
#+BEGIN_SRC emacs-lisp

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

#+END_SRC 

Set up =use-package=
#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+END_SRC 

* Personal Information
Set up the basic user information variables.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Nick Salesky"
      user-mail-address "nicksalesky@gmail.com")
#+END_SRC 

* Configure Emacs builtin packages
** Saveplace: Remember your location in a file
#+BEGIN_SRC emacs-lisp

(use-package saveplace
  :unless noninteractive
  :config
  (setq save-place-limit 1000)
  (save-place-mode))

#+END_SRC 

#+RESULTS:
: t

** Savehist: Keep track of minibuffer history
#+BEGIN_SRC emacs-lisp

(use-package savehist
  :unless noninteractive
  :defer 1
  :config
  (setq savehist-additional-variables '(compile-command kill-ring regexp-search-ring))
  (savehist-mode 1))

#+END_SRC 

#+RESULTS:

** Time
#+BEGIN_SRC emacs-lisp

;; (use-package time
;;   :defer t
;;   :config
;;   (setq display-time-24hr-format nil))

;; TODO look into displaying the current time in the modeline


#+END_SRC 

** Global-auto-revert-mode
Auto-revert all buffers by default

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

* UI
Set up all the fancy user-interface elements to make Emacs look nice.

** Basic Emacs appearance settings
Set the window title to display the current file and major mode.

#+BEGIN_SRC emacs-lisp
(setq-default frame-title-format '("%b [%m]"))
#+END_SRC 


Enable global visual line mode to wrap lines properly.

#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC 

Enable line numbers globally for most modes, except the ones explicitly disabled.

#+BEGIN_SRC emacs-lisp

;; Enable line numbers
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
        term-mode-hook
        shell-mode-hook
        eshell-mode-hook
        treemacs-mode-hook
        pdf-view-mode-hook
        vterm-mode-hook
        ))
(add-hook mode (lambda () (display-line-numbers-mode 0))))

#+END_SRC 

** Fonts
Set up the fonts for text rendering, pretty self explanatory :)

Here are my current font settings
#+BEGIN_SRC emacs-lisp

(set-face-attribute 'default nil :font "JetBrains Mono" :height 120)
(set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height 120)
(set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :height 140)

#+END_SRC 

Here are some of my older settings that I'm keeping around in case I ever want to switch back.
#+BEGIN_SRC emacs-lisp
;; (set-face-attribute 'default nil :font "JetBrains Mono" :height 120)
;; (set-face-attribute 'default nil :font "Rec Mono Semi Casual" :height 120)
;; (set-face-attribute 'fixed-pitch nil :font "Rec Mono Semi Casual" :height 120)
#+END_SRC 

Also install helpful icons useful for a ton of packages to add more visual detail. *NOTE* you'll have to run ~M-x all-the-icons-install-fonts~ in order to, well, install the fonts!

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC 

Emojis!!!! Works in any text mode :smile:

#+BEGIN_SRC emacs-lisp

(use-package emojify
  :config
  (global-emojify-mode))

#+END_SRC

** Theme
Give Emacs a nice color scheme! Other themes that I like include:
- doom-shades-of-purple
- doom-flatwhite
- doom-tomorrow-day
- mindre-theme

#+BEGIN_SRC emacs-lisp

(use-package doom-themes)

(use-package ef-themes
  :config
  (load-theme 'ef-spring t))

(use-package modus-themes)
  ;; :custom
  ;; (modus-themes-italic-constructs t)     ; use italics for comments
  ;; (modus-themes-bold-constructs t)       ; use bold
  ;; (modus-themes-syntax '(faint))
  ;; (modus-themes-mixed-fonts t)           ; Enable fixed and variable pitched fonts
  ;; (modus-themes-prompts '(italic))
  ;; ;; (modus-themes-mode-line '(accented borderless))
  ;; (modus-themes-mode-line '())
  ;; (modus-themes-subtle-line-numbers t)

  ;; :config
  ;; (modus-themes-load-vivendi))

#+END_SRC 

** Modeline
I use ~doom-modeline~ to manage my modeline.

#+BEGIN_SRC emacs-lisp

(use-package doom-modeline
  :init
  (setq doom-modeline-height 35
        doom-modeline-support-imenu t)
  (doom-modeline-mode 1))

#+END_SRC 

** Dashboard
I like having a nice dashboard when Emacs loads in order to remember what I was last working on and (eventually!) view my ~org-agenda~ for the day. Maybe one day I'll revert to just a scratch buffer like others, but I'm sticking with this for now!

#+BEGIN_SRC emacs-lisp

;; Necessary for dashboard in order to get nice seperators between sections
(use-package page-break-lines)

(use-package dashboard
    :init
    (setq
        dashboard-image-banner-max-width 256
        dashboard-startup-banner "~/.dotfiles/.emacs.d/emacs.png"
        dashboard-center-content t
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        ;; dashboard-projects-switch-function 'projectile-switch-project
        dashboard-items '((recents . 5)
                          (projects . 5)
                          (agenda . 5)))
    :config
    (dashboard-setup-startup-hook))

#+END_SRC

** Smooth Scrolling
Make Emacs scroll more consistently with a small margin at the bottom.

#+BEGIN_SRC emacs-lisp

(pixel-scroll-mode)
(setq scroll-margin 5)

#+END_SRC 

** Helpful
Make the Emacs help pages more "helpful".

#+begin_src emacs-lisp

(use-package helpful
  :bind
  (("C-h f" . helpful-callable)
   ("C-h v" . helpful-variable)
   ("C-h k" . helpful-key)))


  
  ;; :custom
  ;; (counsel-describe-function-function #'helpful-callable)
  ;; (counsel-describe-variable-function #'helpful-variable)
  ;; :bind
  ;; ([remap describe-function] . counsel-describe-function)
  ;; ([remap describe-command] . helpful-command)
  ;; ([remap describe-variable] . counsel-describe-variable)
  ;; ([remap describe-key] . helpful-key))

#+end_src

** Hl-todo: Highlight and navigate TODO keywords

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :config
  (global-hl-todo-mode))
#+END_SRC 

** Hl-line: Highlight the current line

Highlight the current line where point is present. I have this disabled for now because I was starting to find it difficult to differentiate the region from the current line.

#+BEGIN_SRC emacs-lisp
;; (add-hook 'prog-mode-hook 'hl-line-mode)
#+END_SRC 

** Transparent Frame
Creates a handy little function to toggle a semi-transparent window frame either for aeshetics or to view another window underneath Emacs.

#+BEGIN_SRC emacs-lisp

(defun ns/toggle-window-transparency ()
  "Toggle transparency."
  (interactive)
  (let ((alpha-transparency 75))
    (if (equal alpha-transparency (frame-parameter nil 'alpha-background))
        (set-frame-parameter nil 'alpha-background 100)
      (set-frame-parameter nil 'alpha-background alpha-transparency))))

#+END_SRC

* Vertico: Minibuffer
Sets up minibuffer completion with Vertico.

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (vertico-mode))
#+END_SRC 

** Consult: add helpful functions with completion

#+BEGIN_SRC emacs-lisp

(use-package consult
  :bind
  ("C-s" . consult-line))

#+END_SRC 

** Orderless: match the different parts of completion candidates

#+BEGIN_SRC emacs-lisp

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '(
                                   (file (styles basic partial-completion))
                                   (eglot (styles orderless)))))

#+END_SRC 

** All-the-icons-completion: add icons to completion candidates

#+BEGIN_SRC emacs-lisp

(use-package all-the-icons-completion
  :config
  (all-the-icons-completion-mode))

#+END_SRC 

** Embark

#+BEGIN_SRC emacs-lisp

(use-package embark
  ;; TODO: set up bindings for embark-act and embark-dwim
  :bind
  (("C-." . embark-act)
   ("M-." . embark-dwim))

  :config

  ;; Hide the mode line for Embark buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

#+END_SRC 

* Editor
** Aggressive-indent: Always keep code properly indented
#+BEGIN_SRC emacs-lisp

(use-package aggressive-indent
  :hook
  (emacs-lisp-mode-hook . aggressive-indent-mode))

#+END_SRC 

** Rainbow-delimiters: Different color for each parenthesis level

Give parenthases rainbow coloring depending on their nested level in all programming modes.

#+BEGIN_SRC emacs-lisp

(use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC 

** SmartParens: Match grouping characters

#+BEGIN_SRC emacs-lisp

(use-package smartparens
  :hook
  (prog-mode . smartparens-mode)

  :config
  ;; Don't insert paired single quotes in Elisp mode
  (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil))

#+END_SRC

** YASnippet: Create common snippets
Add various templates to Emacs.

#+BEGIN_SRC emacs-lisp

(use-package yasnippet
  :config
  (yas-global-mode))

#+END_SRC

** Company: Auto completion
A good code-completion package. I might consider switching to Corfu at some point.

#+begin_src emacs-lisp

;; (use-package company
;;     :hook (prog-mode . company-mode)
;;     :bind (:map company-active-map
;;         ("<tab>" . company-complete-selection))
;;         ;; (:map lsp-mode-map
;;         ;; ("<tab>" . company-indent-or-complete-common))
;;     :custom
;;     (company-minimum-prefix-length 1)
;;     (company-idle-delay 0.0))

;; ;; Adds colors and icons to company-mode
;; (use-package company-box
;;     :hook (company-mode . company-box-mode))

#+end_src

** Corfu: Completion at point
Configure the ~corfu~ completion-at-point package. This configuration was inspired by the official documentation and [[https://kristofferbalintona.me/posts/202202270056/][here]].

#+BEGIN_SRC emacs-lisp

(use-package corfu
  :bind
  (:map corfu-map
        ("C-n" . corfu-next)
        ("C-p" . corfu-previous)
        ("<escape>" . corfu-quit)
        ("<return>" . corfu-insert)
        ("M-d" . corfu-show-documentation)
        ("M-l" . corfu-show-location))

  :custom
  (corfu-auto t)
  (corfu-auto-prefix 3) ; Minimum length of prefix for auto-complete
  (corfu-auto-delay 0) ; Immediately start auto-completion

  (corfu-min-width 80) ; Min width of popup, I like to have it consistent
  (corfu-max-width corfu-min-width) ; Always have the same width
  (corfu-count 14) ; Max number of candidates to show
  (corfu-scroll-margin 4)
  ;; (corfu-cycle nil)

  ;; (corfu-quit-at-boundary nil)
  ;; (corfu-seperator ?\s)            ; Use space
  ;; (corfu-quit-no-match 'seperator) ; Don't quit if there is 'corfu-seperator' inserted
  ;; (corfu-quit-no-match t)
  (corfu-preview-current 'insert)  ; Preview first candidate
  (corfu-preselect-first t)        ; Preselect first candidate?

  (corfu-echo-documentation nil) ; Use 'corfu-doc' instead

  ;; Enable indentation+completion using the TAB key instead of M-TAB
  (tab-always-indent 'complete)
  ;; (completion-cycle-threshold nil)

  (corfu-excluded-modes '(eshell-mode))

  :init
  (global-corfu-mode))

  ;; :config
  ;; (general-add-advice '(corfu--setup corfu--teardown) :after 'evil-normalize-keymaps)
  ;; (evil-make-overriding-map corfu-map))


(use-package kind-icon
  :custom
  (kind-icon-default-face 'corfu-default)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(use-package corfu-doc
  :hook (corfu-mode . corfu-doc-mode))

#+END_SRC 

** Which-key: List commands for current prefix

#+begin_src emacs-lisp

(use-package which-key
  ;; :after (ivy)
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

#+end_src

** Olivetti: Centered document editing

#+BEGIN_SRC emacs-lisp

(use-package olivetti
  :custom
  (olivetti-body-width 110)
  (olivetti-style t))
  ;; :hook
  ;; (org-mode . olivetti-mode))

#+END_SRC

** Iedit: Simple multi-cursor editing
I took this from [[https://www.masteringemacs.org/article/iedit-interactive-multi-occurrence-editing-in-your-buffer]] but modified it slightly. I use this method of binding the key to avoid triggering the annoying =iedit= warning informing me that the default key ~C-;~ is occupied.

#+BEGIN_SRC emacs-lisp
(use-package iedit
  :config
  (defun iedit-dwim (arg)
    "Starts iedit but uses \\[narrow-to-defun] to limit its scope."
    (interactive "P")
    (if arg
        (iedit-mode)
      (save-excursion
        (save-restriction
          (widen)
          (if (bound-and-true-p iedit-mode)
              (iedit-done)
            (narrow-to-defun)
            (iedit-start (current-word) (point-min) (point-max)))))))
  (keymap-global-set "C-;" 'iedit-dwim))
#+END_SRC

** TRAMP: Edit remote files

#+BEGIN_SRC emacs-lisp

(setq tramp-default-method "ssh") ;; Use SSH by default for remote files


#+END_SRC 
* Spell checker
** Flyspell
#+BEGIN_SRC emacs-lisp

;; (use-package flyspell
;;   :bind
;;   (:map flyspell-mode-map
;;         ("C-;" . nil)) ;; unbind this key so I can use it for iedit-dwim
  
;;   :hook ((prog-mode . flyspell-prog-mode)
;;         ((org-mode markdown-mode) . flyspell-mode)))

#+END_SRC 

** Flyspell-correct: Show list of correct spelling suggestions

#+BEGIN_SRC emacs-lisp

;; (use-package flyspell-correct
;;   :after (flyspell)
;;   :config
;;   (setq flyspell-correct-interface #'flyspell-correct-ivy))

#+END_SRC 

* Project Management
Tools to distinguish projects and quickly navigate inside projects and between them.

** Projectile
#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  ;; :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;(when (file-directory-p "~/Documents")
    ;(setq projectile-project-search-path '("~/Documents")))
  (setq projectile-switch-project-action #'projectile-dired))

#+end_src

** Treemacs: A tree layout file explorer
#+begin_src emacs-lisp

(use-package treemacs)
;; (use-package treemacs-evil
;;     :after (treemacs evil))
(use-package treemacs-projectile
    :after (treemacs projectile))
(use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))
;;(use-package treemacs-perspective
;;  :after (treemacs perspective))
(use-package treemacs-magit
    :after (treemacs magit))
;; (use-package lsp-treemacs
;;     :after (treemacs lsp-mode)
;;     :config (lsp-treemacs-sync-mode 1))
(use-package treemacs-all-the-icons
  :config
  (treemacs-load-theme "all-the-icons"))

#+end_src

** Tab-bar-mode
I used to use =perspective=, but in my grand push to minimize external packages, I stumbled upon =tab-bar-mode=. It does everything I ever wanted from perspective, and integrates really well with the rest of Emacs.

I got some help for these functions from [[https://mmk2410.org/2022/02/11/using-emacs-tab-bar-mode/]]

#+BEGIN_SRC emacs-lisp

(defun ns/tab-bar-switch-or-create (name func)
  (if (ns/tab-bar-tab-exists name)
      (tab-bar-switch-to-tab name)
    (ns/tab-bar-new-tab name func)))

(defun ns/tab-bar-tab-exists (name)
  (member name
          (mapcar #'(lambda (tab) (alist-get 'name tab))
                  (tab-bar-tabs))))

(defun ns/tab-bar-new-tab (name func)
  (when (eq nil tab-bar-mode)
    (tab-bar-mode))
  (tab-bar-new-tab)
  (tab-bar-rename-tab name)
  (funcall func))

(use-package emacs
  :custom
  (tab-bar-show nil))

#+END_SRC 

* Keybindings and Basic Feature Configuration
Here's where I configure some basic Emacs features with keybindings.

** ESC quits prompts
Make ESC quit prompts.

#+begin_src emacs-lisp

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

#+RESULTS:
: keyboard-escape-quit

** Hydra
*** Basic Config
Install the base Hydra package.

#+begin_src emacs-lisp
(use-package hydra)
#+end_src

** Tabs Not Spaces
I took this basic configuration from [[https://dougie.io/emacs/indentation/]]

#+begin_src emacs-lisp

;; Set the default tab settings
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq-default c-basic-offset 4)
(setq-default python-indent-offset 4)

;; Make the backspace properly erase the whole tab instead of removing
;; 1 space at a time
(setq backward-delete-char-untabify-method 'hungry)

#+end_src

** Files
Keybindings for working with files.

#+BEGIN_SRC emacs-lisp

;; Keep track of recently-opened files
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key (kbd "C-x C-r") 'consult-recent-file)

#+END_SRC

** Windows
Keybindings for operating windows.

#+BEGIN_SRC emacs-lisp

(define-key global-map (kbd "M-o") 'ace-window)

#+END_SRC

** Search
Keybindings for searching within different contexts.

| COMMAND             | DESCRIPTION                                     | KEYBINDING |
|---------------------+-------------------------------------------------+------------|
| avy-goto-char-timer | Start typing some chars on screen, jump to them | s          |
| avy-pop-mark        | Jump back from last =avy= search                | S          |
| swiper              | Search the current buffer                       | SPC s b    |

#+BEGIN_SRC emacs-lisp

; TODO: convert this to Emacs keybindings

;; (general-define-key
;;  :states 'normal
;;  "s" 'avy-goto-char-timer
;;  "S" 'avy-pop-mark)

;; (general-define-key
;;  :states '(normal emacs)
;;  "C-s" 'consult-line)

;; (my-leader
;;   "s" '(:ignore t :which-key "search")
;;   "s b" '(consult-line :which-key "Search buffer"))

;; (use-package ag
;;   :general
;;   (my-leader
;;     "s p" '(projectile-ag :which-key "Search project")))
#+END_SRC

#+RESULTS:

** Dumb-jump

#+BEGIN_SRC emacs-lisp

(use-package dumb-jump
  :config
  (defhydra dumb-jump-hydra (:color blue :columns 3)
    "Dumb Jump"
    ("j" dumb-jump-go "Go")
    ("o" dumb-jump-go-other-window "Other window")
    ("e" dumb-jump-go-prefer-external "Go external")
    ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
    ("i" dumb-jump-go-prompt "Prompt")
    ("l" dumb-jump-quick-look "Quick look")
    ("b" dumb-jump-back "Back"))
  (keymap-global-set "M-g j" 'dumb-jump-hydra/body))

#+END_SRC

* Version Control
** Magit

#+begin_src emacs-lisp
(use-package magit)
#+end_src

** Forge: issue GitHub pull requests and more

#+BEGIN_SRC emacs-lisp
;(use-package forge)
#+END_SRC 

** Blamer: Git blame the current line

#+BEGIN_SRC emacs-lisp
(use-package blamer)
#+END_SRC 

* Org Mode
** Basic config
The very basics for Org-mode, setting up fonts and basic visual features.

#+begin_src emacs-lisp

 (defun ns/org-mode-setup ()
   (org-indent-mode)
   ;; (variable-pitch-mode 1)
   (visual-line-mode 1))

(defun ns/org-font-setup ()
  ;; Make sure that anything that should be fixed pitch in Org files actually appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit
                        'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit
                    '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit
                        '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

;; Got this from https://stackoverflow.com/questions/10969617/hiding-markup-elements-in-org-mode
(defun ns/org-toggle-emphasis ()
  "Toggle hiding/showing of org emphasis markers"
  (interactive)
  (if org-hide-emphasis-markers
      (set-variable 'org-hide-emphasis-markers nil)
    (set-variable 'org-hide-emphasis-markers t)))


;; (use-package org-contrib :pin nongnu)
(use-package org-contrib)

;; Org Mode
(use-package org
    :hook (org-mode . ns/org-mode-setup)
    :config
    ;; (ns/org-font-setup)
    (setq
     ;; org-hide-emphasis-markers nil
        org-ellipsis " ▾"
        org-pretty-entities t

        org-directory "~/notes"

        org-src-tab-acts-natively t
        org-src-preserve-indentation t

        org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)"
                "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)"))))

#+end_src

** Fonts
Set up ~variable-pitch~ fonts.

#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook 'variable-pitch-mode)

(require 'org-faces)

;; Resize Org headings
(dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))

;; Make the document title a bit bigger
(set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)

;; Make sure certain org faces continue to use fixed-pitch face even whenn variable-pitch-mode is on
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-facee fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

#+END_SRC 

** Configure Babel
#+begin_src emacs-lisp

(org-babel-do-load-languages 'org-babel-load-languages
    '((emacs-lisp . t)
    (python . t)))

(setq org-confirm-babel-evaluate nil)


#+end_src

** Auto-tangle configuration files
Automatically tangle the =config.org= file whenever it is saved. I currently have this turned off because I prefer to be safe and run =(org-babel-tangle)= manually whenever I'm done editing this file.

#+begin_src emacs-lisp

(defun ns/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.dotfiles/.emacs.d/config.org"))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

;(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ns/org-babel-tangle-config)))

#+end_src

** Org-agenda and org-capture
Here's where I set up my agenda system. I like to keep an inbox file where I can quickly capture new items without thinking about them and then organize them into my main agenda file later when I have time. My agenda system was directly inspired by [[https://www.labri.fr/perso/nrougier/GTD/index.html][nrougier]].

#+BEGIN_SRC emacs-lisp

(setq org-agenda-files (list "agenda/inbox.org"
                             "agenda/agenda.org"
                             "agenda/projects.org") ; add any files to be pulled from
      org-agenda-hide-tags-regexp "."     ; hide all tags in the agenda
      org-log-done 'time             ; log the time when a task is *DONE*
      org-agenda-compact-blocks nil
      org-agenda-block-separator nil
      )

#+END_SRC 

Now, I need to set up some capture templates to quickly add items to the agenda.

#+BEGIN_SRC emacs-lisp

(setq org-capture-templates
       `(("i" "Inbox" entry  (file "agenda/inbox.org")
        ,(concat "* TODO %?\n"
                 "/Entered on/ %U"))
         ("m" "Meeting entry" entry (file+headline "agenda.org" "Future")
          ,(concat "* %? :meeting:\n"
                   "<%<%Y-%m-%d %a %H:00>>"))
         ("n" "Note" entry (file "notes.org")
          ,(concat "* Note (%a)\n"
                   "/Entered on/ %U\n" "\n" "%?"))))
#+END_SRC 

Make it easier to move tasks from the inbox or other files over to ~projects.org~, and automatically save all agenda files after refiling.

#+BEGIN_SRC emacs-lisp

(setq org-refile-targets
      '(("agenda/projects.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)"))
      org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil)

(defun ns/org-agenda-save-buffers ()
  "Save `org-agenda-files` buffers without user confirmation."
  (interactive)
  (message "Saving org-agenda-files buffers...")
  (save-some-buffers t
                     (lambda ()
                       (when (member (buffer-file-name) (org-agenda-files))
                         t)))
  (message "Saving org-agenda-files buffers... done"))

;; Automatically save after refile
(advice-add 'org-refile :after
            (lambda (&rest _)
              (ns/org-agenda-save-buffers)))


#+END_SRC 

Log when tasks are activated (first moved to *NEXT*) courtesy of [[https://emacs.stackexchange.com/questions/35751][Erik Anderson]]. 

#+BEGIN_SRC emacs-lisp

(defun log-todo-next-creation-date (&rest ignore)
  "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
  (when (and (string= (org-get-todo-state) "NEXT")
             (not (org-entry-get nil "ACTIVATED")))
    (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
(add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)

#+END_SRC 

Set up a custom agenda command (*g*)

#+BEGIN_SRC emacs-lisp

(setq org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((agenda ""
                  ((org-agenda-span 1) ; limit display to a single day
                   (org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-deadline-warning-days 0)))
          (todo "NEXT"
                ((org-agenda-skip-function
                  '(org-agenda-skip-entry-if 'deadline))
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-overriding-header "\nTasks\n")))
          (agenda nil
                  ((org-agenda-entry-types '(:deadline))
                   (org-agenda-span 1)
                   (org-agenda-format-date "")
                   (org-deadline-warning-days 7)
                   (org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
                   (org-agenda-overriding-header "\nDeadlines")))
          (tags-todo "inbox"
                     ((org-agenda-prefix-format "  %?-12t% s")
                      (org-agenda-overriding-header "\nInbox\n")))
          (tags "CLOSED>=\"<today>\""
                ((org-agenda-overriding-header "\nCompleted today\n")))))))

#+END_SRC 

Finally, define a keybinding for =org-capture= and opening up the =org-agenda=

#+BEGIN_SRC emacs-lisp

(keymap-global-set "C-c c" 'org-capture)
(keymap-global-set "C-c a" 'org-agenda)

#+END_SRC 

** Org-roam

#+BEGIN_SRC emacs-lisp

;; (use-package org-roam
;;   :custom
;;   (org-roam-directory "~/notes/roam/")
;;   :config
;;   (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
;;   (org-roam-db-autosync-mode)
;;   :general
;;   (my-leader
;;     "n r" '(:ignore t :which-key "roam")
;;     ;;"n r" '(:keymap org-roam-mode-map :which-key "roam")
;;     "n r f" '(org-roam-node-find :which-key "Find Node")
;;     "n r i" '(org-roam-node-insert :which-key "Insert Node")
;;     "n r o" '(org-roam-node-open :which-key "Open Node")
;;     "n r g" '(org-roam-graph :which-key "Graph")))

#+END_SRC

** Org-journal

#+BEGIN_SRC emacs-lisp

;; (use-package org-journal
;;   :general
;;   (my-leader
;;     "n j" '(:ignore t :which-key "journal")
;;     "n j j" '(org-journal-new-entry :which-key "New entry")
;;     "n j r" '(org-journal-read-entry :which-key "Read entry")
;;     "n j s" '(org-journal-search :which-key "Search journal"))
  
;;   :custom
;;   (org-journal-dir "~/notes/journal")
;;   (org-journal-file-format "%Y-%m-%d.org")
;;   (org-journal-date-format "%B %d, %Y (%A) ")
;;   (org-journal-date-prefix "* ")
;;   (org-journal-time-prefix "** "))

#+END_SRC 

** Org-present

#+BEGIN_SRC emacs-lisp

(defun ns/org-present-begin ()
  (setq-local ns/olivetti-mode-enabled (bound-and-true-p olivetti-mode)) ;; remember if olivetti was already enabled or not
  (olivetti-mode 1)                                                      ;; enable olivetti-mode regardless

  ;; Tweak the font sizes
  (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                     (header-line (:height 4.0) variable-pitch)
                                     (org-document-title (:height 1.75) org-document-title)
                                     (org-code (:height 1.55) org-code)
                                     (org-verbatim (:height 1.55) org-verbatim)
                                     (org-block (:height 1.25) org-block)
                                     (org-block-begin-line (:height 0.7) org-block)))

  ;; Set a blank header line string to create some blank space at the top
  (setq-local header-line-format " ")

  (message "Starting presentation. Good luck!"))

(defun ns/org-present-end ()
  (unless (symbol-value 'ns/olivetti-mode-enabled)
    (olivetti-mode 0))                                                   ;; disable olivetti-mode only if it wasn't open before the presentation

  ;; Reset the font customizations
  (setq-local face-remapping-alist '((default variable-pitch default)))

  ;; Reset the header line back to nothing
  (setq-local header-line-format nil)

  (message "Ending presentation. Nice job!"))

(use-package org-present
  :config
  (add-hook 'org-present-mode-hook 'ns/org-present-begin)
  (add-hook 'org-present-mode-quit-hook 'ns/org-present-end))

#+END_SRC 

** Org-modern
Give Org-mode documents some extra visual polish.

#+BEGIN_SRC emacs-lisp

;; (use-package org-modern
;;     :config
;;     (add-hook 'org-mode-hook #'org-modern-mode)
;;     (add-hook 'org-agenda-finalize #'org-modern-agenda))

#+END_SRC

* Note Taking
** Denote

#+BEGIN_SRC emacs-lisp
(use-package denote
  :straight (denote :type git :host gitlab
                    :repo "protesilaos/denote")
  :custom
  (denote-directory "~/notes")
  (denote-known-keywords
    '("emacs" "personal" "journal")))
#+END_SRC 

* Shells/Terminal Emulators
** term-mode

#+BEGIN_SRC emacs-lisp

(use-package term
  :custom
  (explicit-shell-file-name "fish"))

(use-package eterm-256color
  :hook
  (term-mode . eterm-256color-mode))

#+END_SRC

** Vterm
#+BEGIN_SRC emacs-lisp

(use-package vterm
  :custom
  (vterm-shell "fish")
  (vterm-max-scrollback 10000))

#+END_SRC 

* Programming
** General Tools
*** Format All The Code: Simple code formatting
A simple code formatting system for a ton of languages.

#+begin_src emacs-lisp

(use-package format-all)
  ;:hook
  ;(prog-mode . format-all-mode)

#+end_src

*** Flycheck
#+BEGIN_SRC emacs-lisp

(use-package flycheck)
  ;; :config
  ;; (global-flycheck-mode))

#+END_SRC 

*** Eglot: Language-server protocols

#+BEGIN_SRC emacs-lisp

(use-package eglot
  :custom
  (eglot-events-buffer-size 0)) ;; Disable the events buffer for performance

  ;; :config
  ;; (add-hook 'eglot-managed-mode-hook (lambda () (flymake-mode -1))))
  

#+END_SRC 

*** LSP: Language-server protocols
#+begin_src emacs-lisp

;; (use-package lsp-mode
;;     :commands (lsp lsp-deferred)
;;     :init
;;     (setq lsp-lens-enable t
;;           lsp-signature-auto-activate nil
;;           lsp-ui-doc-mode t)
;;     :general
;;     (evil-define-key 'normal lsp-mode-map (kbd "/") lsp-command-map)
;;     :config
;;     (lsp-enable-which-key-integration t)
;;     :custom

;;     ;; Enable/disable type hints as you type for Rust
;;     (lsp-rust-analyzer-server-display-inlay-hints t)
;;     (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
;;     (lsp-rust-analyzer-display-chaining-hints nil)
;;     (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
;;     (lsp-rust-analyzer-display-closure-return-type-hints t)
;;     (lsp-rust-analyzer-display-parameter-hints t)
;;     (lsp-rust-analyzer-display-reborrow-hints nil))

;; ;; (use-package lsp-ivy)

;; (use-package lsp-ui
;;     :hook (lsp-mode . lsp-ui-mode)
;;     :custom
;;     (lsp-ui-peek-always-show t)
;;     (lsp-ui-sideline-show-hover t)
;;     (lsp-ui-doc-position 'bottom)
;;     (lsp-ui-doc-enable nil))

#+end_src

*** DAP: Debugging support

#+BEGIN_SRC emacs-lisp

;; (use-package dap-mode
;;   :config
;;   (dap-auto-configure-mode))

#+END_SRC 

*** Realgud: Alternative Debugger

#+BEGIN_SRC emacs-lisp

;; (use-package realgud)

#+END_SRC 

*** Wakatime
Wakatime makes it easy for me to keep track of how much time I'm spending on various projects.

#+BEGIN_SRC emacs-lisp

(use-package wakatime-mode
  :config
  (global-wakatime-mode))

#+END_SRC

** Languages
*** YAML

#+BEGIN_SRC emacs-lisp

(use-package yaml-mode
  :mode "\\.yml\\'")

#+END_SRC 

*** C/C++

#+begin_src emacs-lisp

;; (add-hook 'c-mode-hook 'lsp)
;; (add-hook 'c++-mode-hook 'lsp)
(add-hook 'c-mode-hook 'eglot-ensure)
(add-hook 'c++-mode-hook 'eglot-ensure)

#+end_src

*** Docker
Adds syntax highlighting and other small features for ~Dockerfile~ files.

#+BEGIN_SRC emacs-lisp

(use-package dockerfile-mode
  :mode "Dockerfile\\'")

#+END_SRC 

*** Clojure

#+BEGIN_SRC emacs-lisp

(use-package clojure-mode
  :mode "\\.clj\\'"
  :hook ((clojure-mode . eglot-ensure)
         (clojurescript-mode . eglot-ensure)
         (clojurec-mode . eglot-ensure)))

(use-package cider)

#+END_SRC 

*** GLSL: OpenGL shaders

#+BEGIN_SRC emacs-lisp

(use-package glsl-mode
  :mode ("\\.glsl\\'" "\\.vert\\'" "\\.frag\\'" "\\.geom\\'"))

#+END_SRC

*** Go
#+BEGIN_SRC emacs-lisp

(use-package go-mode
  :mode "\\.go\\'"
  :hook (go-mode . eglot-ensure))

#+END_SRC 

*** Python

#+BEGIN_SRC emacs-lisp

;; (use-package lsp-pyright)

(use-package python-mode
  :hook (python-mode . (lambda ()
                         (eglot-ensure)
                         (setq tab-width 4)))
  :custom
  (python-shell-interpreter "python3"))
  ;;(dap-python-debugger 'debugpy))

;; (require 'lsp-pyright)
;; (require 'dap-python)


#+END_SRC

*** Typescript

#+begin_src emacs-lisp :results output

(use-package typescript-mode
  :mode "\\.ts\\'"
  ;; :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 4))

#+end_src

#+RESULTS:

*** Ruby

#+BEGIN_SRC emacs-lisp

;; (use-package ruby-mode
;;   :hook (ruby-mode . eglot-ensure))

(use-package inf-ruby) ;; Interact with a Ruby REPL

#+END_SRC

*** Rust
Inspired by https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/

Most Rustic keybindings begin with =C-c C-c=

#+begin_src emacs-lisp

;; (use-package rustic
;;   :hook (rustic-mode . eglot-ensure)
;;   :custom
;;   (rustic-lsp-client 'eglot)
;;   ;; :bind (:map rustic-mode-map
;;               ;; ("M-j" . lsp-ui-imenu)
;;               ;; ("M-?" . lsp-find-references)))
;;   :config
;;   (remove-hook 'rustic-mode-hook 'flycheck-mode))

  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  ;; (setq rustic-format-on-save t))

(use-package rust-mode
  :mode "\\.rs\\'"
  :hook (rust-mode . eglot-ensure))

#+end_src

*** Web
Editing in a mixed-language web format.

#+BEGIN_SRC emacs-lisp

(use-package web-mode
    :commands (web-mode)
    :mode (("\\.html" . web-mode)
            ("\\.htm" . web-mode)
;           ("\\.tsx$" . web-mode)
            ("\\.mustache\\'" . web-mode)
            ("\\.phtml\\'" . web-mode)
            ("\\.as[cp]x\\'" . web-mode)
            ("\\.erb\\'" . web-mode)
            ("\\.sgml\\'" . web-mode)))

#+END_SRC 

* IRC
I use the ~erc-sasl~ implementation provided [[https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bchat/erc/local/erc-sasl/erc-sasl.el][here]], so you'll have to download it before running this.

Set up SASL for [[libera.chat]].
#+BEGIN_SRC emacs-lisp

;; (require 'erc-sasl)

;; (add-to-list 'erc-sasl-server-regexp-list "irc\\.libera\\.chat")

;; ;; Redefine/Override the erc-login() function from the erc package, so that
;; ;; it now uses SASL
;; (defun erc-login ()
;;   "Perform user authentication at the IRC server. (PATCHED)"
;;   (erc-log (format "login: nick: %s, user: %s %s %s :%s"
;;            (erc-current-nick)
;;            (user-login-name)
;;            (or erc-system-name (system-name))
;;            erc-session-server
;;            erc-session-user-full-name))
;;   (if erc-session-password
;;       (erc-server-send (format "PASS %s" erc-session-password))
;;     (message "Logging in without password"))
;;   (when (and (featurep 'erc-sasl) (erc-sasl-use-sasl-p))
;;     (erc-server-send "CAP REQ :sasl"))
;;   (erc-server-send (format "NICK %s" (erc-current-nick)))
;;   (erc-server-send
;;    (format "USER %s %s %s :%s"
;;        ;; hacked - S.B.
;;        (if erc-anonymous-login erc-email-userid (user-login-name))
;;        "0" "*"
;;        erc-session-user-full-name))
;;   (erc-update-mode-line))

#+END_SRC

Set up my basic IRC user info.
#+BEGIN_SRC emacs-lisp

(setq erc-server "irc.libera.chat"
      erc-nick "abcd987"              ; change this
      erc-autojoin-channels-alist '((Libera.Chat
                                     "#systemcrafters"
                                     "#emacs"
                                     "#go-nuts"
                                     "##rust"))
      erc-track-shorten-start 8
      erc-kill-buffer-on-part t
      erc-auto-query 'bury)

#+END_SRC

* Documents
** PDFs

#+BEGIN_SRC emacs-lisp

(use-package tablist)

(use-package pdf-tools
  :config
  (pdf-loader-install))

#+END_SRC

Extends ~saveplace-mode~ with support for PDFs using ~pdf-tools~
#+BEGIN_SRC emacs-lisp

(use-package saveplace-pdf-view)

#+END_SRC 

** Ebooks

#+BEGIN_SRC emacs-lisp

(use-package nov
  :mode "\\.epub\\'")

#+END_SRC

* Elisp Libraries
Idk, these are just some libraries I'm testing our for writing in Elisp

#+BEGIN_SRC emacs-lisp

(use-package request)

#+END_SRC 





























































































